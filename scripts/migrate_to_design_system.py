#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É NutryFlow
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ TextFormField –Ω–∞ NutryInput –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏
"""

import os
import re
import shutil
from pathlib import Path
from typing import List, Dict, Any

class DesignSystemMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É"""
    
    def __init__(self):
        self.project_root = Path(".")
        self.backup_dir = self.project_root / "backup_before_migration"
        self.migration_log = []
        
    def backup_files(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        self.backup_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        files_to_backup = [
            "lib/features/auth/presentation/widgets/auth_widgets.dart",
            "lib/features/profile/presentation/widgets/profile_form_field.dart",
            "lib/features/onboarding/presentation/screens/login_screen.dart",
            "lib/features/onboarding/presentation/screens/registration_screen.dart",
            "lib/features/onboarding/presentation/screens/enhanced_login_screen.dart",
            "lib/features/onboarding/presentation/screens/enhanced_registration_screen.dart",
            "lib/features/onboarding/presentation/screens/profile_info_screen.dart",
            "lib/features/onboarding/presentation/screens/forgot_password_screen.dart",
        ]
        
        for file_path in files_to_backup:
            source = self.project_root / file_path
            if source.exists():
                backup_path = self.backup_dir / file_path
                backup_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source, backup_path)
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {file_path}")
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ 'backup_before_migration'")
    
    def migrate_auth_widgets(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç auth_widgets.dart –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É"""
        file_path = "lib/features/auth/presentation/widgets/auth_widgets.dart"
        
        if not Path(file_path).exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        
        print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è {file_path}...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º AuthTextField –Ω–∞ NutryInput
        new_content = self._replace_auth_text_field(content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        new_content = self._update_imports(new_content, [
            "import '../../../../shared/design/components/forms/forms.dart';"
        ])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {file_path}")
        self.migration_log.append(f"Migrated: {file_path}")
    
    def migrate_profile_form_field(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç profile_form_field.dart –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É"""
        file_path = "lib/features/profile/presentation/widgets/profile_form_field.dart"
        
        if not Path(file_path).exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        
        print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è {file_path}...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º ProfileFormField –Ω–∞ NutryInput
        new_content = self._replace_profile_form_field(content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        new_content = self._update_imports(new_content, [
            "import '../../../../shared/design/components/forms/forms.dart';"
        ])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {file_path}")
        self.migration_log.append(f"Migrated: {file_path}")
    
    def migrate_onboarding_screens(self):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω—ã onboarding –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É"""
        screens = [
            "lib/features/onboarding/presentation/screens/login_screen.dart",
            "lib/features/onboarding/presentation/screens/registration_screen.dart",
            "lib/features/onboarding/presentation/screens/enhanced_login_screen.dart",
            "lib/features/onboarding/presentation/screens/enhanced_registration_screen.dart",
            "lib/features/onboarding/presentation/screens/profile_info_screen.dart",
            "lib/features/onboarding/presentation/screens/forgot_password_screen.dart",
        ]
        
        for screen_path in screens:
            if not Path(screen_path).exists():
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {screen_path}")
                continue
            
            print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è {screen_path}...")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(screen_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º TextFormField –Ω–∞ NutryInput
            new_content = self._replace_text_form_fields(content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            new_content = self._update_imports(new_content, [
                "import '../../../../shared/design/components/forms/forms.dart';"
            ])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(screen_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {screen_path}")
            self.migration_log.append(f"Migrated: {screen_path}")
    
    def _replace_auth_text_field(self, content: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç AuthTextField –Ω–∞ NutryInput"""
        
        # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å AuthTextField
        content = re.sub(
            r'class AuthTextField extends StatelessWidget \{[\s\S]*?\}',
            self._get_auth_text_field_replacement(),
            content
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AuthTextField
        content = re.sub(
            r'AuthTextField\(([^)]+)\)',
            r'NutryInput(\1)',
            content
        )
        
        return content
    
    def _replace_profile_form_field(self, content: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç ProfileFormField –Ω–∞ NutryInput"""
        
        # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å ProfileFormField
        content = re.sub(
            r'class ProfileFormField extends StatelessWidget \{[\s\S]*?\}',
            self._get_profile_form_field_replacement(),
            content
        )
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ProfileFormField
        content = re.sub(
            r'ProfileFormField\(([^)]+)\)',
            r'NutryInput(\1)',
            content
        )
        
        return content
    
    def _replace_text_form_fields(self, content: str) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç TextFormField –Ω–∞ NutryInput –≤ —ç–∫—Ä–∞–Ω–∞—Ö"""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
        patterns = [
            # Email –ø–æ–ª—è
            (
                r'TextFormField\(\s*controller:\s*(\w+),\s*decoration:\s*InputDecoration\(\s*labelText:\s*[\'"](Email|email)[\'"]',
                r'NutryInput.email(label: \'\1\', controller: \1'
            ),
            # Password –ø–æ–ª—è
            (
                r'TextFormField\(\s*controller:\s*(\w+),\s*decoration:\s*InputDecoration\(\s*labelText:\s*[\'"](–ü–∞—Ä–æ–ª—å|–ø–∞—Ä–æ–ª—å|Password|password)[\'"]',
                r'NutryInput.password(label: \'\1\', controller: \1'
            ),
            # Number –ø–æ–ª—è
            (
                r'TextFormField\(\s*controller:\s*(\w+),\s*keyboardType:\s*TextInputType\.number',
                r'NutryInput.number(label: \'–ß–∏—Å–ª–æ\', controller: \1'
            ),
            # –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            (
                r'TextFormField\(\s*controller:\s*(\w+),\s*decoration:\s*InputDecoration\(\s*labelText:\s*[\'"]([^\'"]+)[\'"]',
                r'NutryInput.text(label: \'\2\', controller: \1'
            ),
        ]
        
        for pattern, replacement in patterns:
            content = re.sub(pattern, replacement, content)
        
        return content
    
    def _update_imports(self, content: str, new_imports: List[str]) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã
        content = re.sub(
            r'import.*app_colors\.dart.*\n',
            '',
            content
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import_section = "import 'package:flutter/material.dart';\n"
        for new_import in new_imports:
            import_section += f"{new_import}\n"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\n')
        insert_index = 0
        
        for i, line in enumerate(lines):
            if line.startswith('import '):
                insert_index = i + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        lines.insert(insert_index, "")
        for new_import in new_imports:
            lines.insert(insert_index, new_import)
        
        return '\n'.join(lines)
    
    def _get_auth_text_field_replacement(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–µ–Ω—É –¥–ª—è AuthTextField"""
        return '''class AuthTextField extends StatelessWidget {
  final String label;
  final IconData prefixIcon;
  final TextEditingController controller;
  final bool obscureText;
  final TextInputType keyboardType;
  final String? Function(String?)? validator;
  final Widget? suffixIcon;
  final String? helperText;

  const AuthTextField({
    super.key,
    required this.label,
    required this.prefixIcon,
    required this.controller,
    this.obscureText = false,
    this.keyboardType = TextInputType.text,
    this.validator,
    this.suffixIcon,
    this.helperText,
  });

  @override
  Widget build(BuildContext context) {
    return NutryInput(
      controller: controller,
      label: label,
      prefixIcon: prefixIcon,
      obscureText: obscureText,
      validator: validator,
      suffixWidget: suffixIcon,
      helperText: helperText,
    );
  }
}'''
    
    def _get_profile_form_field_replacement(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º–µ–Ω—É –¥–ª—è ProfileFormField"""
        return '''class ProfileFormField extends StatelessWidget {
  final TextEditingController controller;
  final String label;
  final String? hint;
  final TextInputType? keyboardType;
  final List<TextInputFormatter>? inputFormatters;
  final String? Function(String?)? validator;
  final bool obscureText;
  final Widget? suffixIcon;
  final int? maxLines;
  final bool enabled;
  final VoidCallback? onTap;

  const ProfileFormField({
    super.key,
    required this.controller,
    required this.label,
    this.hint,
    this.keyboardType,
    this.inputFormatters,
    this.validator,
    this.obscureText = false,
    this.suffixIcon,
    this.maxLines = 1,
    this.enabled = true,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return NutryInput(
      controller: controller,
      label: label,
      hint: hint,
      validator: validator,
      suffixWidget: suffixIcon,
      maxLines: maxLines,
      enabled: enabled,
      onTap: onTap,
      inputFormatters: inputFormatters,
    );
  }
}'''
    
    def generate_migration_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        report_path = self.project_root / "MIGRATION_REPORT.md"
        
        report_content = f"""# –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É

## –û–±–∑–æ—Ä
–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É NutryFlow –∑–∞–≤–µ—Ä—à–µ–Ω–∞.

## –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
{chr(10).join(f"- {log}" for log in self.migration_log)}

## –ß—Ç–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ

### 1. –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- `AuthTextField` ‚Üí `NutryInput`
- `ProfileFormField` ‚Üí `NutryInput`
- `TextFormField` ‚Üí `NutryInput` (—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∏–ø–∞–º–∏)

### 2. –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
- –í—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã
- –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ü–≤–µ—Ç–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (normal, focused, error, success, disabled)

### 3. –£–ª—É—á—à–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è email –∏ password –ø–æ–ª–µ–π
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—è –≤–≤–æ–¥–∞
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

## –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ `backup_before_migration/`

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
2. –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
3. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
4. –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

### NutryInput
```dart
// Email –ø–æ–ª–µ
NutryInput.email(
  label: 'Email',
  controller: emailController,
  hint: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email',
);

// –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
NutryInput.password(
  label: '–ü–∞—Ä–æ–ª—å',
  controller: passwordController,
  hint: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å',
);

// –ß–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ
NutryInput.number(
  label: '–í–æ–∑—Ä–∞—Å—Ç',
  controller: ageController,
  hint: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç',
);
```

### NutryForm
```dart
// –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
NutryForm.login(
  children: [
    NutryInput.email(label: 'Email', controller: emailController),
    NutryInput.password(label: '–ü–∞—Ä–æ–ª—å', controller: passwordController),
  ],
  onSubmit: () => handleLogin(),
);
```
"""
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        self.backup_files()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.migrate_auth_widgets()
        self.migrate_profile_form_field()
        self.migrate_onboarding_screens()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_migration_report()
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.migration_log)}")
        print("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: MIGRATION_REPORT.md")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    migrator = DesignSystemMigrator()
    migrator.run_migration()

if __name__ == "__main__":
    main()
