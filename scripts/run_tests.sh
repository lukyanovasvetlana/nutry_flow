#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ NutryFlow
# –ê–≤—Ç–æ—Ä: NutryFlow Team
# –î–∞—Ç–∞: 2024

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Flutter
check_flutter() {
    if ! command -v flutter &> /dev/null; then
        print_error "Flutter –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flutter –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ PATH."
        exit 1
    fi
    print_success "Flutter –Ω–∞–π–¥–µ–Ω: $(flutter --version | head -n 1)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    flutter pub get
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ñ–∞–π–ª–æ–≤
generate_mocks() {
    print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ñ–∞–π–ª–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    mkdir -p test/features/meal_plan/data/repositories
    mkdir -p test/features/meal_plan/presentation/bloc
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock —Ñ–∞–π–ª—ã
    flutter packages pub run build_runner build --delete-conflicting-outputs
    
    print_success "Mock —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# Unit —Ç–µ—Å—Ç—ã
run_unit_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤"
    
    local test_files=(
        "test/features/meal_plan/data/repositories/meal_plan_repository_test.dart"
        "test/features/meal_plan/presentation/bloc/meal_plan_bloc_test.dart"
    )
    
    local failed_tests=0
    
    for test_file in "${test_files[@]}"; do
        if [ -f "$test_file" ]; then
            print_info "–ó–∞–ø—É—Å–∫: $test_file"
            if flutter test "$test_file" --coverage; then
                print_success "–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª: $test_file"
            else
                print_error "–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: $test_file"
                ((failed_tests++))
            fi
        else
            print_warning "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $test_file"
        fi
    done
    
    if [ $failed_tests -eq 0 ]; then
        print_success "–í—Å–µ unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
    else
        print_error "$failed_tests unit —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        return 1
    fi
}

# Widget —Ç–µ—Å—Ç—ã
run_widget_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Widget —Ç–µ—Å—Ç–æ–≤"
    
    local widget_test_dir="test/widget_tests"
    
    if [ -d "$widget_test_dir" ]; then
        print_info "–ó–∞–ø—É—Å–∫ widget —Ç–µ—Å—Ç–æ–≤..."
        if flutter test "$widget_test_dir" --coverage; then
            print_success "–í—Å–µ widget —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        else
            print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ widget —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            return 1
        fi
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è widget —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $widget_test_dir"
    fi
}

# Integration —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
run_integration_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Integration —Ç–µ—Å—Ç–æ–≤"
    
    local integration_test_file="test/integration/supabase_integration_test.dart"
    
    if [ -f "$integration_test_file" ]; then
        print_info "–ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)..."
        print_warning "–î–ª—è –∑–∞–ø—É—Å–∫–∞ integration —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: flutter test $integration_test_file"
    else
        print_warning "–§–∞–π–ª integration —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $integration_test_file"
    fi
}

# Performance —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
run_performance_tests() {
    print_header "–ó–∞–ø—É—Å–∫ Performance —Ç–µ—Å—Ç–æ–≤"
    
    local performance_test_file="test/performance/database_performance_test.dart"
    
    if [ -f "$performance_test_file" ]; then
        print_info "–ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)..."
        print_warning "–î–ª—è –∑–∞–ø—É—Å–∫–∞ performance —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: flutter test $performance_test_file"
    else
        print_warning "–§–∞–π–ª performance —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $performance_test_file"
    fi
}

# –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
analyze_coverage() {
    print_header "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
    
    if [ -f "coverage/lcov.info" ]; then
        print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏..."
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º genhtml –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v genhtml &> /dev/null; then
            print_warning "genhtml –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ lcov –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–∞."
        else
            genhtml coverage/lcov.info -o coverage/html
            print_success "HTML –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: coverage/html/index.html"
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_info "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è:"
        tail -n 1 coverage/lcov.info | sed 's/.*lines......: \([0-9.]*\)%.*/\1/' | xargs -I {} echo "–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {}%"
    else
        print_warning "–§–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å —Ñ–ª–∞–≥–æ–º --coverage"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
run_code_analysis() {
    print_header "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
    
    print_info "–ó–∞–ø—É—Å–∫ flutter analyze..."
    if flutter analyze; then
        print_success "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
    else
        print_error "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    print_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    flutter clean
    flutter pub get
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ NutryFlow"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_flutter
    check_dependencies
    generate_mocks
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    local exit_code=0
    
    run_unit_tests || exit_code=1
    run_widget_tests || exit_code=1
    run_integration_tests
    run_performance_tests
    
    # –ê–Ω–∞–ª–∏–∑
    analyze_coverage
    run_code_analysis || exit_code=1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if [ $exit_code -eq 0 ]; then
        print_header "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        print_success "–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    else
        print_header "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        print_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö"
    fi
    
    return $exit_code
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "unit")
        check_flutter
        check_dependencies
        generate_mocks
        run_unit_tests
        ;;
    "widget")
        check_flutter
        check_dependencies
        run_widget_tests
        ;;
    "integration")
        check_flutter
        check_dependencies
        run_integration_tests
        ;;
    "performance")
        check_flutter
        check_dependencies
        run_performance_tests
        ;;
    "coverage")
        analyze_coverage
        ;;
    "analyze")
        run_code_analysis
        ;;
    "clean")
        cleanup
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  unit        - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤"
        echo "  widget      - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ widget —Ç–µ—Å—Ç–æ–≤"
        echo "  integration - –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤"
        echo "  performance - –ó–∞–ø—É—Å–∫ performance —Ç–µ—Å—Ç–æ–≤"
        echo "  coverage    - –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
        echo "  analyze     - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
        echo "  clean       - –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"
        ;;
    "")
        main
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac 