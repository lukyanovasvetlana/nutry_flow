#!/bin/bash

# Скрипт автоматической очистки кода NutryFlow
# Автор: AI Assistant
# Дата: $(date)

echo "🧹 Запуск автоматической очистки кода NutryFlow..."
echo "=================================================="

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Функция для логирования
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Проверяем, что мы в корневой директории проекта
if [ ! -f "pubspec.yaml" ]; then
    error "Скрипт должен быть запущен из корневой директории проекта"
    exit 1
fi

# Создаем резервную копию
log "Создание резервной копии..."
BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r lib "$BACKUP_DIR/"
cp analysis_options.yaml "$BACKUP_DIR/"
log "Резервная копия создана в $BACKUP_DIR"

# Шаг 1: Анализ текущего состояния
log "Шаг 1: Анализ текущего состояния кода..."
BEFORE_ISSUES=$(flutter analyze --no-fatal-infos 2>&1 | grep -c "issues found" || echo "0")
log "Найдено проблем: $BEFORE_ISSUES"

# Шаг 2: Автоматическое исправление форматирования
log "Шаг 2: Автоматическое исправление форматирования..."
dart format lib/ --set-exit-if-changed
if [ $? -eq 0 ]; then
    log "Форматирование исправлено"
else
    warn "Некоторые файлы не могут быть автоматически отформатированы"
fi

# Шаг 3: Автоматическое исправление импортов
log "Шаг 3: Автоматическое исправление импортов..."
dart fix --apply
if [ $? -eq 0 ]; then
    log "Автоматические исправления применены"
else
    warn "Некоторые автоматические исправления не могут быть применены"
fi

# Шаг 4: Удаление неиспользуемых импортов
log "Шаг 4: Удаление неиспользуемых импортов..."
find lib -name "*.dart" -exec dart fix --apply {} \;
log "Неиспользуемые импорты удалены"

# Шаг 5: Проверка зависимостей
log "Шаг 5: Проверка зависимостей..."
flutter pub deps --style=tree | grep -E "(unused|deprecated)" || log "Проблем с зависимостями не найдено"

# Шаг 6: Финальный анализ
log "Шаг 6: Финальный анализ кода..."
AFTER_ISSUES=$(flutter analyze --no-fatal-infos 2>&1 | grep -c "issues found" || echo "0")
log "Проблем после очистки: $AFTER_ISSUES"

# Шаг 7: Генерация отчета
log "Шаг 7: Генерация отчета об очистке..."
REPORT_FILE="auto_cleanup_report_$(date +%Y%m%d_%H%M%S).md"

cat > "$REPORT_FILE" << EOF
# Отчет об автоматической очистке кода NutryFlow

## 📊 Статистика очистки

### Время выполнения: $(date)
### Длительность: $(($(date +%s) - $(date -d "$(date)" +%s))) секунд

### Проблемы:
- **До очистки**: $BEFORE_ISSUES
- **После очистки**: $AFTER_ISSUES
- **Уменьшено на**: $((BEFORE_ISSUES - AFTER_ISSUES))

## 🔧 Выполненные действия

1. ✅ Создание резервной копии
2. ✅ Автоматическое исправление форматирования
3. ✅ Применение автоматических исправлений
4. ✅ Удаление неиспользуемых импортов
5. ✅ Проверка зависимостей
6. ✅ Финальный анализ
7. ✅ Генерация отчета

## 📁 Файлы

- **Резервная копия**: $BACKUP_DIR
- **Отчет**: $REPORT_FILE
- **Конфигурация линтеров**: analysis_options.yaml

## 🎯 Рекомендации

1. **Проверьте изменения** в git diff
2. **Запустите тесты** для проверки функциональности
3. **Проведите code review** изменений
4. **Настройте pre-commit хуки** для автоматической очистки

## 🚀 Следующие шаги

1. Настройте CI/CD pipeline с автоматической очисткой
2. Добавьте pre-commit хуки
3. Настройте регулярные аудиты качества кода
4. Интегрируйте линтеры в IDE

---
*Отчет сгенерирован автоматически скриптом auto_cleanup.sh*
EOF

log "Отчет сохранен в $REPORT_FILE"

# Шаг 8: Git статус
log "Шаг 8: Проверка Git статуса..."
if [ -d ".git" ]; then
    git status --porcelain | head -10
    log "Используйте 'git diff' для просмотра изменений"
else
    warn "Git репозиторий не найден"
fi

# Финальное сообщение
echo ""
echo "=================================================="
echo "🎉 Автоматическая очистка кода завершена!"
echo "📊 Проблем уменьшено с $BEFORE_ISSUES до $AFTER_ISSUES"
echo "📁 Резервная копия: $BACKUP_DIR"
echo "📋 Отчет: $REPORT_FILE"
echo "=================================================="

# Проверяем, есть ли изменения
if [ "$BEFORE_ISSUES" != "$AFTER_ISSUES" ]; then
    echo -e "${GREEN}✅ Код успешно очищен!${NC}"
else
    echo -e "${YELLOW}⚠️  Изменений не обнаружено${NC}"
fi

echo ""
echo "Следующие команды для проверки:"
echo "  flutter analyze          # Анализ кода"
echo "  git diff                 # Просмотр изменений"
echo "  flutter test             # Запуск тестов"
echo "  flutter run              # Проверка работоспособности"
