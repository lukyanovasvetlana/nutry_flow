import 'package:flutter/material.dart';
import 'dart:math' as math;
import '../tokens/design_tokens.dart';
import 'contrast_analyzer.dart';

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
class ValidationResult {
  final bool isValid;
  final List<String> errors;
  final List<String> warnings;
  final List<String> recommendations;

  const ValidationResult({
    required this.isValid,
    this.errors = const [],
    this.warnings = const [],
    this.recommendations = const [],
  });

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  bool get hasErrors => errors.isNotEmpty;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  bool get hasWarnings => warnings.isNotEmpty;

  /// –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  String get report {
    final buffer = StringBuffer();

    if (isValid) {
      buffer.writeln('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
    } else {
      buffer.writeln('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
    }

    if (errors.isNotEmpty) {
      buffer.writeln('\nüö® –û—à–∏–±–∫–∏:');
      for (final error in errors) {
        buffer.writeln('  ‚Ä¢ $error');
      }
    }

    if (warnings.isNotEmpty) {
      buffer.writeln('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      for (final warning in warnings) {
        buffer.writeln('  ‚Ä¢ $warning');
      }
    }

    if (recommendations.isNotEmpty) {
      buffer.writeln('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      for (final recommendation in recommendations) {
        buffer.writeln('  ‚Ä¢ $recommendation');
      }
    }

    return buffer.toString();
  }
}

/// –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–æ–≤
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
class TokenValidator {
  // Prevent instantiation
  TokenValidator._();

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç
  static ValidationResult validateColor(Color color, String tokenName) {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null (–Ω–µ –Ω—É–∂–Ω–æ –≤ Dart —Å null safety)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    if (color.opacity < 0.1) {
      warnings.add(
          '–¶–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π (opacity: ${color.opacity.toStringAsFixed(2)})');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª—ã–π —Ü–≤–µ—Ç
    if (color.computeLuminance() > 0.9) {
      warnings.add(
          '–¶–≤–µ—Ç —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª—ã–π (luminance: ${color.computeLuminance().toStringAsFixed(3)})');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã–π —Ü–≤–µ—Ç
    if (color.computeLuminance() < 0.1) {
      warnings.add(
          '–¶–≤–µ—Ç —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã–π (luminance: ${color.computeLuminance().toStringAsFixed(3)})');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä—ã–π —Ü–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π)
    final hsl = HSLColor.fromColor(color);
    if (hsl.saturation < 0.1) {
      recommendations
          .add('–¶–≤–µ—Ç –æ—á–µ–Ω—å –Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–∞');
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä—É —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
  static ValidationResult validateColorPair(
      Color foreground, Color background, String pairName) {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    final contrastRatio =
        ContrastAnalyzer.calculateContrastRatio(foreground, background);

    if (!ContrastAnalyzer.meetsAAContrast(foreground, background)) {
      errors.add(
          '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AA (${contrastRatio.toStringAsFixed(2)}:1)');
    } else if (!ContrastAnalyzer.meetsAAAContrast(foreground, background)) {
      warnings.add(
          '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AAA (${contrastRatio.toStringAsFixed(2)}:1)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    if (foreground == background) {
      errors.add('–¶–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ñ–æ–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ —Ü–≤–µ—Ç–∞
    final colorDistance = _calculateColorDistance(foreground, background);
    if (colorDistance < 50) {
      warnings.add(
          '–¶–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏ (distance: ${colorDistance.toStringAsFixed(1)})');
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É
  static ValidationResult validateTypography(
      TextStyle style, String tokenName) {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
    if (style.fontSize != null) {
      if (style.fontSize! < 10) {
        errors.add('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (${style.fontSize})');
      } else if (style.fontSize! > 72) {
        warnings.add('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (${style.fontSize})');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞ —à—Ä–∏—Ñ—Ç–∞
    if (style.fontWeight != null) {
      if (style.fontWeight!.index < FontWeight.w100.index ||
          style.fontWeight!.index > FontWeight.w900.index) {
        errors.add('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–µ—Å —à—Ä–∏—Ñ—Ç–∞ (${style.fontWeight})');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
    if (style.height != null) {
      if (style.height! < 1.0) {
        warnings.add('–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è (${style.height})');
      } else if (style.height! > 2.0) {
        warnings.add('–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (${style.height})');
      }
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç—Å—Ç—É–ø—ã
  static ValidationResult validateSpacing(double spacing, String tokenName) {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (spacing < 0) {
      errors.add('–û—Ç—Å—Ç—É–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ($spacing)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (spacing > 100) {
      warnings.add('–û—Ç—Å—Ç—É–ø –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ($spacing)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 4 –∏–ª–∏ 8)
    if (spacing % 4 != 0) {
      recommendations.add(
          '–û—Ç—Å—Ç—É–ø –Ω–µ –∫—Ä–∞—Ç–µ–Ω 4 ($spacing), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 4, 8, 12, 16, etc.');
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞–¥–∏—É—Å—ã —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
  static ValidationResult validateBorderRadius(
      double radius, String tokenName) {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (radius < 0) {
      errors.add('–†–∞–¥–∏—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ($radius)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (radius > 50) {
      warnings.add('–†–∞–¥–∏—É—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ($radius)');
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã
  static ValidationResult validateAllTokens() {
    final errors = <String>[];
    final warnings = <String>[];
    final recommendations = <String>[];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
    final colorTokens = [
      (DesignTokens.colors.primary, 'primary'),
      (DesignTokens.colors.secondary, 'secondary'),
      (DesignTokens.colors.accent, 'accent'),
      (DesignTokens.colors.background, 'background'),
      (DesignTokens.colors.surface, 'surface'),
      (DesignTokens.colors.onSurface, 'onSurface'),
      (DesignTokens.colors.error, 'error'),
      (DesignTokens.colors.success, 'success'),
      (DesignTokens.colors.warning, 'warning'),
      (DesignTokens.colors.info, 'info'),
    ];

    for (final (color, name) in colorTokens) {
      final result = validateColor(color, name);
      errors.addAll(result.errors.map((e) => '$name: $e'));
      warnings.addAll(result.warnings.map((w) => '$name: $w'));
      recommendations.addAll(result.recommendations.map((r) => '$name: $r'));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä —Ü–≤–µ—Ç–æ–≤
    final colorPairs = [
      (
        DesignTokens.colors.onSurface,
        DesignTokens.colors.surface,
        'onSurface/surface'
      ),
      (
        DesignTokens.colors.onPrimary,
        DesignTokens.colors.primary,
        'onPrimary/primary'
      ),
      (DesignTokens.colors.onError, DesignTokens.colors.error, 'onError/error'),
      (
        DesignTokens.colors.onSuccess,
        DesignTokens.colors.success,
        'onSuccess/success'
      ),
    ];

    for (final (foreground, background, name) in colorPairs) {
      final result = validateColorPair(foreground, background, name);
      errors.addAll(result.errors.map((e) => '$name: $e'));
      warnings.addAll(result.warnings.map((w) => '$name: $w'));
      recommendations.addAll(result.recommendations.map((r) => '$name: $r'));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
    final typographyTokens = [
      (DesignTokens.typography.headlineLargeStyle, 'headlineLarge'),
      (DesignTokens.typography.headlineMediumStyle, 'headlineMedium'),
      (DesignTokens.typography.titleLargeStyle, 'titleLarge'),
      (DesignTokens.typography.titleMediumStyle, 'titleMedium'),
      (DesignTokens.typography.bodyLargeStyle, 'bodyLarge'),
      (DesignTokens.typography.bodyMediumStyle, 'bodyMedium'),
      (DesignTokens.typography.bodySmallStyle, 'bodySmall'),
    ];

    for (final (style, name) in typographyTokens) {
      final result = validateTypography(style, name);
      errors.addAll(result.errors.map((e) => '$name: $e'));
      warnings.addAll(result.warnings.map((w) => '$name: $w'));
      recommendations.addAll(result.recommendations.map((r) => '$name: $r'));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
    final spacingTokens = [
      (DesignTokens.spacing.xs, 'xs'),
      (DesignTokens.spacing.sm, 'sm'),
      (DesignTokens.spacing.md, 'md'),
      (DesignTokens.spacing.lg, 'lg'),
      (DesignTokens.spacing.xl, 'xl'),
      (DesignTokens.spacing.xxl, 'xxl'),
    ];

    for (final (spacing, name) in spacingTokens) {
      final result = validateSpacing(spacing, name);
      errors.addAll(result.errors.map((e) => 'spacing.$name: $e'));
      warnings.addAll(result.warnings.map((w) => 'spacing.$name: $w'));
      recommendations
          .addAll(result.recommendations.map((r) => 'spacing.$name: $r'));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–æ–≤
    final borderRadiusTokens = [
      (DesignTokens.borders.xs, 'xs'),
      (DesignTokens.borders.sm, 'sm'),
      (DesignTokens.borders.md, 'md'),
      (DesignTokens.borders.lg, 'lg'),
      (DesignTokens.borders.xl, 'xl'),
    ];

    for (final (radius, name) in borderRadiusTokens) {
      final result = validateBorderRadius(radius, name);
      errors.addAll(result.errors.map((e) => 'borders.$name: $e'));
      warnings.addAll(result.warnings.map((w) => 'borders.$name: $w'));
      recommendations
          .addAll(result.recommendations.map((r) => 'borders.$name: $r'));
    }

    return ValidationResult(
      isValid: errors.isEmpty,
      errors: errors,
      warnings: warnings,
      recommendations: recommendations,
    );
  }

  /// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏ –≤ RGB –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
  static double _calculateColorDistance(Color color1, Color color2) {
    final r1 = color1.red;
    final g1 = color1.green;
    final b1 = color1.blue;

    final r2 = color2.red;
    final g2 = color2.green;
    final b2 = color2.blue;

    return math.sqrt(
        math.pow(r1 - r2, 2) + math.pow(g1 - g2, 2) + math.pow(b1 - b2, 2));
  }
}
