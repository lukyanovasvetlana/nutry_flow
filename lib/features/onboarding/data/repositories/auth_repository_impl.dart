import 'package:supabase_flutter/supabase_flutter.dart' as supabase;
import 'package:gotrue/src/types/user.dart' as gotrue;
import '../../domain/repositories/auth_repository.dart';
import '../../domain/entities/user.dart';
import '../services/supabase_service.dart';

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase Auth –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
class AuthRepositoryImpl implements AuthRepository {
  final SupabaseService _supabaseService;
  
  AuthRepositoryImpl(this._supabaseService);
  
  @override
  Future<User?> getCurrentUser() async {
    try {
      final supabaseUser = _supabaseService.getCurrentUser();
      
      if (supabaseUser == null) return null;
      
      return User(
        id: supabaseUser.id,
        email: supabaseUser.email ?? '',
        firstName: supabaseUser.userMetadata?['first_name'] as String?,
        lastName: supabaseUser.userMetadata?['last_name'] as String?,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    } catch (e) {
      return null;
    }
  }
  
  @override
  Future<User> signUp(String email, String password) async {
    print('üî• AuthRepositoryImpl: signUp called - THIS SHOULD NOT HAPPEN IN DEMO MODE!');
    try {
      final response = await _supabaseService.signUp(email, password);
      
      if (response.user == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
      return User(
        id: response.user!.id,
        email: response.user!.email ?? email,
        firstName: response.user!.userMetadata?['first_name'] as String?,
        lastName: response.user!.userMetadata?['last_name'] as String?,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    } catch (e) {
      print('üî• AuthRepositoryImpl: signUp error: $e');
      throw Exception('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.toString()}');
    }
  }
  
  @override
  Future<User> signIn(String email, String password) async {
    print('üî• AuthRepositoryImpl: signIn called - THIS SHOULD NOT HAPPEN IN DEMO MODE!');
    try {
      final response = await _supabaseService.signIn(email, password);
      
      if (response.user == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      }
      
      return User(
        id: response.user!.id,
        email: response.user!.email ?? email,
        firstName: response.user!.userMetadata?['first_name'] as String?,
        lastName: response.user!.userMetadata?['last_name'] as String?,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
    } catch (e) {
      print('üî• AuthRepositoryImpl: signIn error: $e');
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${e.toString()}');
    }
  }
  
  @override
  Future<void> signOut() async {
    try {
      await _supabaseService.signOut();
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${e.toString()}');
    }
  }
  
  @override
  Future<void> resetPassword(String email) async {
    try {
      await _supabaseService.resetPassword(email);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${e.toString()}');
    }
  }
} 