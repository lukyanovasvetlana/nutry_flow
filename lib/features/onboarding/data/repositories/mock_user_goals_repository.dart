import '../../domain/repositories/user_goals_repository.dart';
import '../../domain/entities/user_goals.dart';

/// –ú–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å Supabase –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
class MockUserGoalsRepository implements UserGoalsRepository {
  static final Map<String, UserGoals> _userGoals = {}; // userId -> UserGoals

  @override
  Future<UserGoals> saveUserGoals(UserGoals goals, String userId) async {
    print('üü™ MockUserGoalsRepository: saveUserGoals called - userId: $userId');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await Future.delayed(const Duration(milliseconds: 800));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –≤ "–ø–∞–º—è—Ç–∏"
    _userGoals[userId] = goals;
    
    print('üü™ MockUserGoalsRepository: Goals saved successfully');
    print('üü™ MockUserGoalsRepository: Goals: ${goals.toString()}');
    
    return goals;
  }

  @override
  Future<UserGoals?> getUserGoals(String userId) async {
    print('üü™ MockUserGoalsRepository: getUserGoals called - userId: $userId');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await Future.delayed(const Duration(milliseconds: 500));
    
    final goals = _userGoals[userId];
    
    if (goals != null) {
      print('üü™ MockUserGoalsRepository: Goals found for user');
    } else {
      print('üü™ MockUserGoalsRepository: No goals found for user');
    }
    
    return goals;
  }

  @override
  Future<UserGoals> updateUserGoals(UserGoals goals, String userId) async {
    print('üü™ MockUserGoalsRepository: updateUserGoals called - userId: $userId');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await Future.delayed(const Duration(milliseconds: 700));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–∏ –≤ "–ø–∞–º—è—Ç–∏"
    _userGoals[userId] = goals;
    
    print('üü™ MockUserGoalsRepository: Goals updated successfully');
    
    return goals;
  }

  @override
  Future<bool> deleteUserGoals(String userId) async {
    print('üü™ MockUserGoalsRepository: deleteUserGoals called - userId: $userId');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await Future.delayed(const Duration(milliseconds: 400));
    
    // –£–¥–∞–ª—è–µ–º —Ü–µ–ª–∏ –∏–∑ "–ø–∞–º—è—Ç–∏"
    final removed = _userGoals.remove(userId) != null;
    
    if (removed) {
      print('üü™ MockUserGoalsRepository: Goals deleted successfully');
    } else {
      print('üü™ MockUserGoalsRepository: No goals found to delete');
    }
    
    return removed;
  }
  
  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static void clearAll() {
    _userGoals.clear();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  static int getStoredGoalsCount() {
    return _userGoals.length;
  }
} 