import 'dart:developer' as developer;
import 'package:nutry_flow/core/services/persona_analytics_service.dart';
import 'package:nutry_flow/features/profile/domain/entities/user_profile.dart';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
class PersonaAnalyticsTracker {
  static final PersonaAnalyticsTracker _instance = PersonaAnalyticsTracker._();
  static PersonaAnalyticsTracker get instance => _instance;

  PersonaAnalyticsTracker._();

  UserProfile? _lastTrackedProfile;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã
  Future<void> initialize() async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Initializing persona analytics tracker',
          name: 'PersonaAnalyticsTracker');

      await PersonaAnalyticsService.instance.initialize();

      developer.log(
          'üë§ PersonaAnalyticsTracker: Persona analytics tracker initialized successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to initialize persona analytics tracker: $e',
          name: 'PersonaAnalyticsTracker');
      rethrow;
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  Future<void> setUserProfile(UserProfile profile) async {
    try {
      developer.log('üë§ PersonaAnalyticsTracker: Setting user profile',
          name: 'PersonaAnalyticsTracker');

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      if (_lastTrackedProfile == null) {
        await PersonaAnalyticsService.instance.setUserProfile(profile);
        _lastTrackedProfile = profile;
        return;
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
      await _trackProfileChanges(_lastTrackedProfile!, profile);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–µ—Ä–≤–∏—Å–µ
      await PersonaAnalyticsService.instance.setUserProfile(profile);
      _lastTrackedProfile = profile;

      developer.log(
          'üë§ PersonaAnalyticsTracker: User profile set and changes tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to set user profile: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  Future<void> _trackProfileChanges(
      UserProfile oldProfile, UserProfile newProfile) async {
    try {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
      if (oldProfile.weight != null &&
          newProfile.weight != null &&
          oldProfile.weight != newProfile.weight) {
        await PersonaAnalyticsService.instance.trackWeightChange(
          oldWeight: oldProfile.weight!,
          newWeight: newProfile.weight!,
          targetWeight: newProfile.targetWeight,
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (oldProfile.activityLevel != null &&
          newProfile.activityLevel != null &&
          oldProfile.activityLevel != newProfile.activityLevel) {
        await PersonaAnalyticsService.instance.trackActivityLevelChange(
          oldLevel: oldProfile.activityLevel!,
          newLevel: newProfile.activityLevel!,
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      if (!_areListsEqual(
          oldProfile.dietaryPreferences, newProfile.dietaryPreferences)) {
        await PersonaAnalyticsService.instance.trackDietaryPreferenceChange(
          oldPreferences: oldProfile.dietaryPreferences,
          newPreferences: newProfile.dietaryPreferences,
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π
      if (!_areListsEqual(oldProfile.fitnessGoals, newProfile.fitnessGoals)) {
        await PersonaAnalyticsService.instance.trackProfileUpdate(
          fieldName: 'fitness_goals',
          oldValue: oldProfile.fitnessGoals.join(','),
          newValue: newProfile.fitnessGoals.join(','),
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞
      if (oldProfile.targetWeight != newProfile.targetWeight) {
        await PersonaAnalyticsService.instance.trackProfileUpdate(
          fieldName: 'target_weight',
          oldValue: oldProfile.targetWeight,
          newValue: newProfile.targetWeight,
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π
      if (oldProfile.targetCalories != newProfile.targetCalories) {
        await PersonaAnalyticsService.instance.trackProfileUpdate(
          fieldName: 'target_calories',
          oldValue: oldProfile.targetCalories,
          newValue: newProfile.targetCalories,
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–ª–ª–µ—Ä–≥–∏–π
      if (!_areListsEqual(oldProfile.allergies, newProfile.allergies)) {
        await PersonaAnalyticsService.instance.trackProfileUpdate(
          fieldName: 'allergies',
          oldValue: oldProfile.allergies.join(','),
          newValue: newProfile.allergies.join(','),
        );
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è
      if (!_areListsEqual(
          oldProfile.healthConditions, newProfile.healthConditions)) {
        await PersonaAnalyticsService.instance.trackProfileUpdate(
          fieldName: 'health_conditions',
          oldValue: oldProfile.healthConditions.join(','),
          newValue: newProfile.healthConditions.join(','),
        );
      }

      developer.log(
          'üë§ PersonaAnalyticsTracker: Profile changes tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track profile changes: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —Å–ø–∏—Å–∫–æ–≤
  bool _areListsEqual(List<dynamic> list1, List<dynamic> list2) {
    if (list1.length != list2.length) return false;
    for (int i = 0; i < list1.length; i++) {
      if (list1[i] != list2[i]) return false;
    }
    return true;
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏
  Future<void> trackGoalProgress({
    required String goalType,
    required double currentValue,
    required double targetValue,
  }) async {
    try {
      final progressPercentage = (currentValue / targetValue) * 100;

      await PersonaAnalyticsService.instance.trackGoalProgress(
        goalType: goalType,
        currentValue: currentValue,
        targetValue: targetValue,
        progressPercentage: progressPercentage,
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: Goal progress tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track goal progress: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> trackUserSession({
    required String sessionType,
    required int durationMinutes,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackUserSession(
        sessionType: sessionType,
        durationMinutes: durationMinutes,
        additionalData: additionalData,
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: User session tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track user session: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  Future<void> trackFeatureUsage({
    required String featureName,
    required String action,
    Map<String, dynamic>? parameters,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackFeatureUsage(
        featureName: featureName,
        action: action,
        parameters: parameters,
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: Feature usage tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track feature usage: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  Future<void> trackAppLogin() async {
    try {
      await PersonaAnalyticsService.instance.trackUserSession(
        sessionType: 'app_login',
        durationMinutes: 0,
        additionalData: {
          'login_method': 'app_launch',
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: App login tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log('üë§ PersonaAnalyticsTracker: Failed to track app login: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> trackAppLogout() async {
    try {
      await PersonaAnalyticsService.instance.trackUserSession(
        sessionType: 'app_logout',
        durationMinutes: 0,
        additionalData: {
          'logout_method': 'app_close',
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: App logout tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track app logout: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  Future<void> trackScreenView({
    required String screenName,
    String? screenClass,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackFeatureUsage(
        featureName: 'screen_view',
        action: 'view',
        parameters: {
          'screen_name': screenName,
          if (screenClass != null) 'screen_class': screenClass,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: Screen view tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track screen view: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
  Future<void> trackButtonClick({
    required String buttonName,
    required String screenName,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackFeatureUsage(
        featureName: 'button_click',
        action: 'click',
        parameters: {
          'button_name': buttonName,
          'screen_name': screenName,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: Button click tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track button click: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
  Future<void> trackSearch({
    required String searchTerm,
    required String searchCategory,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackFeatureUsage(
        featureName: 'search',
        action: 'search',
        parameters: {
          'search_term': searchTerm,
          'search_category': searchCategory,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log('üë§ PersonaAnalyticsTracker: Search tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log('üë§ PersonaAnalyticsTracker: Failed to track search: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
  Future<void> trackItemSelection({
    required String itemType,
    required String itemId,
    required String itemName,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      await PersonaAnalyticsService.instance.trackFeatureUsage(
        featureName: 'item_selection',
        action: 'select',
        parameters: {
          'item_type': itemType,
          'item_id': itemId,
          'item_name': itemName,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsTracker: Item selection tracked successfully',
          name: 'PersonaAnalyticsTracker');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsTracker: Failed to track item selection: $e',
          name: 'PersonaAnalyticsTracker');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  UserProfile? get currentUserProfile =>
      PersonaAnalyticsService.instance.currentUserProfile;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => PersonaAnalyticsService.instance.isInitialized;
}
