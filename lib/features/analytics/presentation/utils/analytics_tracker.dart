import 'package:get_it/get_it.dart';
import '../bloc/analytics_bloc.dart';
import '../../domain/entities/analytics_event.dart';
import '../../data/services/analytics_service.dart';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
class AnalyticsTracker {
  static final AnalyticsTracker _instance = AnalyticsTracker._internal();
  factory AnalyticsTracker() => _instance;
  AnalyticsTracker._internal();

  static AnalyticsTracker get instance => _instance;

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static void trackLogin({
    required String method,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.login(
      method: method,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static void trackSignUp({
    required String method,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.signUp(
      method: method,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞
  static void trackScreenView({
    required String screenName,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.screenView(
      screenName: screenName,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã
  static void trackFoodAdded({
    required String foodName,
    required double calories,
    required String mealType,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.foodAdded(
      foodName: foodName,
      calories: calories,
      mealType: mealType,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  static void trackWorkoutCompleted({
    required String workoutName,
    required int duration,
    required int caloriesBurned,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.workoutCompleted(
      workoutName: workoutName,
      duration: duration,
      caloriesBurned: caloriesBurned,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–∏
  static void trackGoalSet({
    required String goalType,
    required String targetValue,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.goalSet(
      goalType: goalType,
      targetValue: targetValue,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
  static void trackGoalAchieved({
    required String goalType,
    required String achievedValue,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.goalAchieved(
      goalType: goalType,
      achievedValue: achievedValue,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É
  static void trackError({
    required String errorType,
    required String errorMessage,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent.error(
      errorType: errorType,
      errorMessage: errorMessage,
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
  static void trackCustomEvent({
    required String eventName,
    Map<String, dynamic>? parameters,
    String? userId,
    String? sessionId,
  }) {
    final event = AnalyticsEvent(
      name: eventName,
      parameters: parameters ?? {},
      userId: userId,
      sessionId: sessionId,
    );
    _trackEvent(event);
  }

  /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
  static void _trackEvent(AnalyticsEvent event) {
    try {
      final analyticsBloc = GetIt.instance<AnalyticsBloc>();
      analyticsBloc.add(TrackAnalyticsEvent(event));
    } catch (e) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      print('üîç AnalyticsTracker: Error tracking event - $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  static Future<void> setUser(String userId) async {
    try {
      final analyticsService = GetIt.instance.get<AnalyticsService>();
      await analyticsService.setUser(userId);
    } catch (e) {
      print('üîç AnalyticsTracker: Error setting user - $e');
    }
  }

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<void> resetUser() async {
    try {
      final analyticsService = GetIt.instance.get<AnalyticsService>();
      await analyticsService.resetUser();
    } catch (e) {
      print('üîç AnalyticsTracker: Error resetting user - $e');
    }
  }
} 