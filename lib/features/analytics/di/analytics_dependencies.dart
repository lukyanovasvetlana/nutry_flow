import 'package:get_it/get_it.dart';
import '../data/services/analytics_service.dart';
import '../data/repositories/analytics_repository.dart';
import '../presentation/bloc/analytics_bloc.dart';

/// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class AnalyticsDependencies {
  static final AnalyticsDependencies _instance = AnalyticsDependencies._internal();
  factory AnalyticsDependencies() => _instance;
  AnalyticsDependencies._internal();

  static AnalyticsDependencies get instance => _instance;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  Future<void> initialize() async {
    print('üîç AnalyticsDependencies: Initializing analytics dependencies...');

    final getIt = GetIt.instance;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    getIt.registerLazySingleton<AnalyticsService>(
      () => AnalyticsService(),
    );

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    getIt.registerLazySingleton<AnalyticsRepository>(
      () => AnalyticsRepository(),
    );

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BLoC
    getIt.registerFactory<AnalyticsBloc>(
      () => AnalyticsBloc(
        analyticsRepository: getIt<AnalyticsRepository>(),
      ),
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    await getIt<AnalyticsService>().initialize();

    print('üîç AnalyticsDependencies: All analytics dependencies initialized successfully');
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç AnalyticsBloc
  AnalyticsBloc getAnalyticsBloc() {
    return GetIt.instance<AnalyticsBloc>();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç AnalyticsService
  AnalyticsService getAnalyticsService() {
    return GetIt.instance<AnalyticsService>();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç AnalyticsRepository
  AnalyticsRepository getAnalyticsRepository() {
    return GetIt.instance<AnalyticsRepository>();
  }
} 