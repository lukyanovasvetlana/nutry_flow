import 'package:supabase_flutter/supabase_flutter.dart';
import 'dart:developer' as developer;
import '../../../../config/supabase_config.dart';

/// –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
///
/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—Ö–æ–¥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase, —Ç–∞–∫ –∏ –¥–µ–º–æ-—Ä–µ–∂–∏–º
/// –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
///
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```dart
/// final authService = AuthService();
///
/// // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// final response = await authService.signUp(
///   email: 'user@example.com',
///   password: 'secure_password',
/// );
///
/// // –í—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// final loginResponse = await authService.signIn(
///   email: 'user@example.com',
///   password: 'secure_password',
/// );
/// ```
class AuthService {
  final SupabaseClient _client = Supabase.instance.client;

  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
  ///
  /// [email] - email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º)
  /// [password] - –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)
  ///
  /// Returns [AuthResponse] —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏
  ///
  /// Throws [AuthException] –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Ç–∏
  /// Throws [NetworkException] –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  ///
  /// –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞.
  Future<AuthResponse> signUp({
    required String email,
    required String password,
  }) async {
    try {
      print('üîê AuthService: Attempting signup for $email');
      developer.log('üîê AuthService: Attempting signup for $email',
          name: 'AuthService');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
      final isDemo = SupabaseConfig.isDemo;
      print('üîê AuthService: Demo mode = $isDemo');
      developer.log('üîê AuthService: Demo mode = $isDemo', name: 'AuthService');

      print('üîê AuthService: Supabase URL = ${SupabaseConfig.url}');
      print('üîê AuthService: Supabase Anon Key = ${SupabaseConfig.anonKey}');

      if (isDemo) {
        developer.log(
            'üîê AuthService: Demo mode detected, simulating successful registration',
            name: 'AuthService');

        // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        await Future.delayed(
            const Duration(seconds: 1)); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏

        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final demoUser = User(
          id: 'demo-user-id-${DateTime.now().millisecondsSinceEpoch}',
          email: email,
          createdAt: DateTime.now().toIso8601String(),
          updatedAt: DateTime.now().toIso8601String(),
          appMetadata: {},
          userMetadata: {},
          aud: 'authenticated',
          role: 'authenticated',
        );

        developer.log('üîê AuthService: Demo registration successful for $email',
            name: 'AuthService');
        return AuthResponse(session: null, user: demoUser);
      }

      // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
      final response = await _client.auth.signUp(
        email: email,
        password: password,
      );

      developer.log('üîê AuthService: Signup successful for $email',
          name: 'AuthService');
      return response;
    } catch (e) {
      developer.log('üîê AuthService: Signup failed for $email: $e',
          name: 'AuthService');
      rethrow;
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
  ///
  /// [email] - email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// [password] - –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ///
  /// Returns [AuthResponse] —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏
  ///
  /// Throws [AuthException] –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Ç–∏
  /// Throws [NetworkException] –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  ///
  /// –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞.
  Future<AuthResponse> signIn({
    required String email,
    required String password,
  }) async {
    try {
      developer.log('üîê AuthService: Attempting signin for $email',
          name: 'AuthService');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
      final isDemo = SupabaseConfig.isDemo;
      developer.log('üîê AuthService: Demo mode = $isDemo', name: 'AuthService');

      if (isDemo) {
        developer.log(
            'üîê AuthService: Demo mode detected, simulating successful login',
            name: 'AuthService');

        await Future.delayed(const Duration(seconds: 1));

        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final demoUser = User(
          id: 'demo-user-id-${DateTime.now().millisecondsSinceEpoch}',
          email: email,
          createdAt: DateTime.now().toIso8601String(),
          updatedAt: DateTime.now().toIso8601String(),
          appMetadata: {},
          userMetadata: {},
          aud: 'authenticated',
          role: 'authenticated',
        );

        developer.log('üîê AuthService: Demo login successful for $email',
            name: 'AuthService');
        return AuthResponse(session: null, user: demoUser);
      }

      final response = await _client.auth.signInWithPassword(
        email: email,
        password: password,
      );

      developer.log('üîê AuthService: Signin successful for $email',
          name: 'AuthService');
      return response;
    } catch (e) {
      developer.log('üîê AuthService: Signin failed for $email: $e',
          name: 'AuthService');
      rethrow;
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  ///
  /// Throws [NetworkException] –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  Future<void> signOut() async {
    try {
      developer.log('üîê AuthService: Attempting signout', name: 'AuthService');
      await _client.auth.signOut();
      developer.log('üîê AuthService: Signout successful', name: 'AuthService');
    } catch (e) {
      developer.log('üîê AuthService: Signout failed: $e', name: 'AuthService');
      rethrow;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email
  ///
  /// [email] - email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
  ///
  /// Throws [NetworkException] –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  Future<void> resetPassword(String email) async {
    try {
      developer.log('üîê AuthService: Attempting password reset for $email',
          name: 'AuthService');
      await _client.auth.resetPasswordForEmail(email);
      developer.log('üîê AuthService: Password reset successful for $email',
          name: 'AuthService');
    } catch (e) {
      developer.log('üîê AuthService: Password reset failed for $email: $e',
          name: 'AuthService');
      rethrow;
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  User? get currentUser => _client.auth.currentUser;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Stream<AuthState> get authStateChanges => _client.auth.onAuthStateChange;
}
