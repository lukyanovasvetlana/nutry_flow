import 'package:flutter/material.dart';
import '../../data/models/menu_item.dart';
import '../../data/services/recipe_service.dart';
import '../../data/services/mock_recipe_service.dart';
import '../../../../config/supabase_config.dart';
import 'add_edit_recipe_screen.dart';

class RecipeDetailsScreen extends StatefulWidget {
  final MenuItem recipe;
  const RecipeDetailsScreen({Key? key, required this.recipe}) : super(key: key);

  @override
  State<RecipeDetailsScreen> createState() => _RecipeDetailsScreenState();
}

class _RecipeDetailsScreenState extends State<RecipeDetailsScreen> {
  late MenuItem _recipe;
  late dynamic _recipeService;

  @override
  void initState() {
    super.initState();
    _recipe = widget.recipe;
    _initializeService();
  }

  void _initializeService() {
    print('üçΩÔ∏è RecipeDetailsScreen: Initializing service - isDemo: ${SupabaseConfig.isDemo}');
    
    if (SupabaseConfig.isDemo) {
      print('üçΩÔ∏è RecipeDetailsScreen: Using MockRecipeService');
      _recipeService = MockRecipeService();
    } else {
      print('üçΩÔ∏è RecipeDetailsScreen: Using RecipeService');
      _recipeService = RecipeService();
    }
  }

  void _navigateToEdit() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => AddEditRecipeScreen(recipe: _recipe)),
    );
    if (result == true) {
      // TODO: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setState(() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, –ª–∏–±–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
      });
    }
  }

  void _deleteRecipe() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç?'),
        content: const Text('–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.'),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('–û—Ç–º–µ–Ω–∞')),
          TextButton(onPressed: () => Navigator.pop(context, true), child: const Text('–£–¥–∞–ª–∏—Ç—å')),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        await _recipeService.deleteRecipe(_recipe.id);
        Navigator.pop(context, true); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å —Ñ–ª–∞–≥–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_recipe.title),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: _navigateToEdit,
          ),
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: _deleteRecipe,
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –§–æ—Ç–æ (–∫–∞—Ä—É—Å–µ–ª—å)
            if (_recipe.photos.isNotEmpty)
              SizedBox(
                height: 200,
                child: PageView.builder(
                  itemCount: _recipe.photos.length,
                  itemBuilder: (context, index) {
                    final photo = _recipe.photos[index];
                    return ClipRRect(
                      borderRadius: BorderRadius.circular(16),
                      child: Image.network(
                        photo.url!,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) =>
                            const Icon(Icons.broken_image, size: 48),
                      ),
                    );
                  },
                ),
              ),
            const SizedBox(height: 16),
            // –ù–∞–∑–≤–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            Text(_recipe.title, style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Row(
              children: [
                Chip(label: Text(_recipe.category)),
                const SizedBox(width: 8),
                Chip(label: Text('–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${_recipe.difficulty}')),
              ],
            ),
            const SizedBox(height: 16),
            // –û–ø–∏—Å–∞–Ω–∏–µ
            Text(_recipe.description, style: Theme.of(context).textTheme.bodyLarge),
            const SizedBox(height: 24),
            // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            Text('–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', style: Theme.of(context).textTheme.titleLarge),
            ..._recipe.ingredients.map((ing) => Text('‚Ä¢ ${ing.name} - ${ing.amount} ${ing.unit}')),
            const SizedBox(height: 24),
            // –®–∞–≥–∏
            Text('–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è', style: Theme.of(context).textTheme.titleLarge),
            ..._recipe.steps.map((step) => ListTile(
                  leading: CircleAvatar(child: Text('${step.order}')),
                  title: Text(step.description),
                  subtitle: step.imageUrl != null
                      ? Image.network(step.imageUrl!)
                      : null,
                )),
            const SizedBox(height: 24),
            // –ù—É—Ç—Ä–∏–µ–Ω—Ç—ã
            Text('–ù—É—Ç—Ä–∏–µ–Ω—Ç—ã', style: Theme.of(context).textTheme.titleLarge),
            Text('–ö–∞–ª–æ—Ä–∏–∏: ${_recipe.nutrition.calories} –∫–∫–∞–ª'),
            Text('–ë–µ–ª–∫–∏: ${_recipe.nutrition.protein} –≥'),
            Text('–ñ–∏—Ä—ã: ${_recipe.nutrition.fat} –≥'),
            Text('–£–≥–ª–µ–≤–æ–¥—ã: ${_recipe.nutrition.carbs} –≥'),
            // TODO: –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –∏–∑ nutrition_facts
          ],
        ),
      ),
    );
  }
} 