import 'package:nutry_flow/core/services/supabase_service.dart';
import 'package:nutry_flow/core/services/local_cache_service.dart';
import 'dart:developer' as developer;

class SyncService {
  static SyncService? _instance;
  static SyncService get instance => _instance ??= SyncService._();

  SyncService._();

  final SupabaseService _supabaseService = SupabaseService.instance;
  final LocalCacheService _localCache = LocalCacheService.instance;

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç-—Ä–µ–∑–æ–ª—é—à–Ω
  Future<SyncResult> syncData<T>({
    required String tableName,
    required String cacheKey,
    required T Function(Map<String, dynamic>) fromJson,
    required Map<String, dynamic> Function(T) toJson,
    Duration cacheValidity = const Duration(hours: 1),
    ConflictResolutionStrategy strategy = ConflictResolutionStrategy.serverWins,
  }) async {
    try {
      developer.log('üîÑ SyncService: Starting sync for $tableName', name: 'SyncService');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
      if (!_supabaseService.isAvailable) {
        developer.log('üîÑ SyncService: Supabase not available, using local cache', name: 'SyncService');
        return await _getFromLocalCache<T>(cacheKey, fromJson);
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
      final serverData = await _getFromServer(tableName);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
      final localData = await _getFromLocalCache<T>(cacheKey, fromJson);

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
      final resolvedData = await _resolveConflicts(
        serverData: serverData,
        localData: localData,
        strategy: strategy,
        tableName: tableName,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      if (resolvedData != null) {
        await _saveToLocalCache(cacheKey, resolvedData, toJson);
      }

      developer.log('üîÑ SyncService: Sync completed for $tableName', name: 'SyncService');
      return SyncResult(
        data: resolvedData,
        source: SyncSource.hybrid,
        conflictsResolved: serverData.isNotEmpty && localData.isNotEmpty,
      );

    } catch (e) {
      developer.log('üîÑ SyncService: Sync failed for $tableName: $e', name: 'SyncService');
      return await _getFromLocalCache<T>(cacheKey, fromJson);
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
  Future<SyncResult> getFromLocalCache<T>(
    String cacheKey,
    T Function(Map<String, dynamic>) fromJson,
  ) async {
    return await _getFromLocalCache<T>(cacheKey, fromJson);
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<SyncResult> forceSyncFromServer<T>({
    required String tableName,
    required String cacheKey,
    required T Function(Map<String, dynamic>) fromJson,
    required Map<String, dynamic> Function(T) toJson,
  }) async {
    try {
      developer.log('üîÑ SyncService: Force syncing from server for $tableName', name: 'SyncService');

      if (!_supabaseService.isAvailable) {
        throw Exception('Supabase not available');
      }

      final serverData = await _getFromServer(tableName);
      
      if (serverData.isNotEmpty) {
        await _saveToLocalCache(cacheKey, serverData, toJson);
      }

      return SyncResult(
        data: serverData,
        source: SyncSource.server,
        conflictsResolved: false,
      );

    } catch (e) {
      developer.log('üîÑ SyncService: Force sync failed for $tableName: $e', name: 'SyncService');
      rethrow;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  Future<void> saveWithSync<T>({
    required String tableName,
    required String cacheKey,
    required T data,
    required Map<String, dynamic> Function(T) toJson,
  }) async {
    try {
      developer.log('üîÑ SyncService: Saving with sync for $tableName', name: 'SyncService');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
      if (_supabaseService.isAvailable) {
        await _saveToServer(tableName, toJson(data));
        developer.log('üîÑ SyncService: Saved to server for $tableName', name: 'SyncService');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      await _saveToLocalCache(cacheKey, [data], toJson);
      developer.log('üîÑ SyncService: Saved to local cache for $tableName', name: 'SyncService');

    } catch (e) {
      developer.log('üîÑ SyncService: Save with sync failed for $tableName: $e', name: 'SyncService');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  Future<void> clearExpiredCache() async {
    try {
      developer.log('üîÑ SyncService: Clearing expired cache', name: 'SyncService');

      final keys = _localCache.getAllKeys();
      final now = DateTime.now();
      final maxAge = const Duration(days: 7);

      for (final key in keys) {
        if (key.endsWith('_timestamp')) {
          final dataKey = key.replaceAll('_timestamp', '');
          if (!_localCache.isCacheValid(dataKey, maxAge)) {
            await _localCache.removeData(dataKey);
            await _localCache.removeData(key);
            developer.log('üîÑ SyncService: Removed expired cache for $dataKey', name: 'SyncService');
          }
        }
      }

    } catch (e) {
      developer.log('üîÑ SyncService: Clear expired cache failed: $e', name: 'SyncService');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  Future<List<Map<String, dynamic>>> _getFromServer(String tableName) async {
    try {
      final user = _supabaseService.currentUser;
      if (user == null) {
        return [];
      }

      return await _supabaseService.getUserData(tableName, userId: user.id);
    } catch (e) {
      developer.log('üîÑ SyncService: Get from server failed for $tableName: $e', name: 'SyncService');
      return [];
    }
  }

  Future<SyncResult> _getFromLocalCache<T>(
    String cacheKey,
    T Function(Map<String, dynamic>) fromJson,
  ) async {
    try {
      final dataList = await _localCache.getDataList(cacheKey);
      final result = dataList.map((item) => fromJson(item)).toList();
      
      return SyncResult(
        data: result,
        source: SyncSource.local,
        conflictsResolved: false,
      );
    } catch (e) {
      developer.log('üîÑ SyncService: Get from local cache failed for $cacheKey: $e', name: 'SyncService');
      return SyncResult(
        data: [],
        source: SyncSource.local,
        conflictsResolved: false,
      );
    }
  }

  Future<void> _saveToServer(String tableName, Map<String, dynamic> data) async {
    try {
      await _supabaseService.saveUserData(tableName, data);
    } catch (e) {
      developer.log('üîÑ SyncService: Save to server failed for $tableName: $e', name: 'SyncService');
      rethrow;
    }
  }

  Future<void> _saveToLocalCache<T>(
    String cacheKey,
    List<T> data,
    Map<String, dynamic> Function(T) toJson,
  ) async {
    try {
      final dataList = data.map((item) => toJson(item)).toList();
      await _localCache.saveDataList(cacheKey, dataList);
    } catch (e) {
      developer.log('üîÑ SyncService: Save to local cache failed for $cacheKey: $e', name: 'SyncService');
      rethrow;
    }
  }

  Future<List<T>> _resolveConflicts<T>({
    required List<Map<String, dynamic>> serverData,
    required List<T> localData,
    required ConflictResolutionStrategy strategy,
    required String tableName,
  }) async {
    if (serverData.isEmpty && localData.isEmpty) {
      return [];
    }

    if (serverData.isEmpty) {
      return localData;
    }

    if (localData.isEmpty) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º serverData –≤ T
      return serverData.map((item) => _convertToT<T>(item)).toList();
    }

    switch (strategy) {
      case ConflictResolutionStrategy.serverWins:
        developer.log('üîÑ SyncService: Using server-wins strategy for $tableName', name: 'SyncService');
        return serverData.map((item) => _convertToT<T>(item)).toList();

      case ConflictResolutionStrategy.localWins:
        developer.log('üîÑ SyncService: Using local-wins strategy for $tableName', name: 'SyncService');
        return localData;

      case ConflictResolutionStrategy.merge:
        developer.log('üîÑ SyncService: Using merge strategy for $tableName', name: 'SyncService');
        return await _mergeData<T>(serverData, localData);

      case ConflictResolutionStrategy.timestamp:
        developer.log('üîÑ SyncService: Using timestamp strategy for $tableName', name: 'SyncService');
        return await _resolveByTimestamp<T>(serverData, localData);
    }
  }

  T _convertToT<T>(Map<String, dynamic> data) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å proper JSON deserialization
    return data as T;
  }

  Future<List<T>> _mergeData<T>(
    List<Map<String, dynamic>> serverData,
    List<T> localData,
  ) async {
    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–∏—è–Ω–∏—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    final merged = <T>[];
    final seenIds = <String>{};

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (final serverItem in serverData) {
      final id = serverItem['id']?.toString() ?? '';
      if (!seenIds.contains(id)) {
        merged.add(_convertToT<T>(serverItem));
        seenIds.add(id);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (final localItem in localData) {
      final id = localItem.toString(); // –£–ø—Ä–æ—â–µ–Ω–Ω–æ
      if (!seenIds.contains(id)) {
        merged.add(localItem);
        seenIds.add(id);
      }
    }

    return merged;
  }

  Future<List<T>> _resolveByTimestamp<T>(
    List<Map<String, dynamic>> serverData,
    List<T> localData,
  ) async {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å updated_at –ø–æ–ª—è
    return serverData.map((item) => _convertToT<T>(item)).toList();
  }
}

// Enums –∏ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

enum SyncSource {
  local,
  server,
  hybrid,
}

enum ConflictResolutionStrategy {
  serverWins,
  localWins,
  merge,
  timestamp,
}

class SyncResult<T> {
  final List<T> data;
  final SyncSource source;
  final bool conflictsResolved;

  SyncResult({
    required this.data,
    required this.source,
    required this.conflictsResolved,
  });

  @override
  String toString() {
    return 'SyncResult(data: ${data.length} items, source: $source, conflictsResolved: $conflictsResolved)';
  }
} 