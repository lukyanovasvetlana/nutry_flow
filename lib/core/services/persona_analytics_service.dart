import 'dart:developer' as developer;
import 'package:nutry_flow/core/services/analytics_service.dart';
import 'package:nutry_flow/features/profile/domain/entities/user_profile.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
class PersonaAnalyticsService {
  static final PersonaAnalyticsService _instance = PersonaAnalyticsService._();
  static PersonaAnalyticsService get instance => _instance;

  PersonaAnalyticsService._();

  bool _isInitialized = false;
  UserProfile? _currentUserProfile;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä—Å–æ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Initializing persona analytics service',
          name: 'PersonaAnalyticsService');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      await AnalyticsService.instance.initialize();

      _isInitialized = true;
      developer.log(
          'üë§ PersonaAnalyticsService: Persona analytics service initialized successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to initialize persona analytics service: $e',
          name: 'PersonaAnalyticsService');
      rethrow;
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  Future<void> setUserProfile(UserProfile profile) async {
    try {
      _currentUserProfile = profile;

      developer.log(
          'üë§ PersonaAnalyticsService: Setting user profile for analytics',
          name: 'PersonaAnalyticsService');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _setBasicUserProperties(profile);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω—ã
      await _setPersonaProperties(profile);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ü–µ–ª–µ–π
      await _setGoalProperties(profile);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      await _setPreferenceProperties(profile);

      developer.log('üë§ PersonaAnalyticsService: User profile set successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to set user profile: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _setBasicUserProperties(UserProfile profile) async {
    await AnalyticsService.instance
        .setUserProperty(name: 'user_id', value: profile.id);
    await AnalyticsService.instance
        .setUserProperty(name: 'user_email', value: profile.email);
    await AnalyticsService.instance
        .setUserProperty(name: 'user_name', value: profile.fullName);

    if (profile.gender != null) {
      await AnalyticsService.instance
          .setUserProperty(name: 'user_gender', value: profile.gender!.name);
    }

    if (profile.dateOfBirth != null) {
      final age = DateTime.now().year - profile.dateOfBirth!.year;
      await AnalyticsService.instance
          .setUserProperty(name: 'user_age', value: age.toString());
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –ø–µ—Ä—Å–æ–Ω—ã
  Future<void> _setPersonaProperties(UserProfile profile) async {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final persona = _determinePersona(profile);
    await AnalyticsService.instance
        .setUserProperty(name: 'user_persona', value: persona);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (profile.activityLevel != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'activity_level', value: profile.activityLevel!.name);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (profile.height != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'user_height_cm', value: profile.height!.toString());
    }

    if (profile.weight != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'user_weight_kg', value: profile.weight!.toString());
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BMI
    if (profile.height != null && profile.weight != null) {
      final bmi =
          profile.weight! / ((profile.height! / 100) * (profile.height! / 100));
      await AnalyticsService.instance
          .setUserProperty(name: 'user_bmi', value: bmi.toStringAsFixed(1));
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ —Ü–µ–ª–µ–π
  Future<void> _setGoalProperties(UserProfile profile) async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–∏ —Ñ–∏—Ç–Ω–µ—Å–∞
    if (profile.fitnessGoals.isNotEmpty) {
      await AnalyticsService.instance.setUserProperty(
          name: 'fitness_goals', value: profile.fitnessGoals.join(','));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (profile.targetWeight != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'target_weight_kg', value: profile.targetWeight!.toString());
    }

    if (profile.targetCalories != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'target_calories', value: profile.targetCalories!.toString());
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
    if (profile.targetProtein != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'target_protein_g', value: profile.targetProtein!.toString());
    }

    if (profile.targetCarbs != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'target_carbs_g', value: profile.targetCarbs!.toString());
    }

    if (profile.targetFat != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'target_fat_g', value: profile.targetFat!.toString());
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
  Future<void> _setPreferenceProperties(UserProfile profile) async {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (profile.dietaryPreferences.isNotEmpty) {
      await AnalyticsService.instance.setUserProperty(
          name: 'dietary_preferences',
          value: profile.dietaryPreferences.map((p) => p.name).join(','));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª–ª–µ—Ä–≥–∏–∏
    if (profile.allergies.isNotEmpty) {
      await AnalyticsService.instance.setUserProperty(
          name: 'allergies', value: profile.allergies.join(','));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
    if (profile.healthConditions.isNotEmpty) {
      await AnalyticsService.instance.setUserProperty(
          name: 'health_conditions', value: profile.healthConditions.join(','));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏
    if (profile.foodRestrictions != null) {
      await AnalyticsService.instance.setUserProperty(
          name: 'food_restrictions', value: profile.foodRestrictions!);
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _determinePersona(UserProfile profile) {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (profile.fitnessGoals.contains('weight_loss') &&
        profile.activityLevel == ActivityLevel.sedentary) {
      return 'beginner_weight_loss';
    } else if (profile.fitnessGoals.contains('muscle_gain') &&
        profile.activityLevel == ActivityLevel.veryActive) {
      return 'advanced_fitness';
    } else if (profile.dietaryPreferences
        .contains(DietaryPreference.vegetarian)) {
      return 'health_conscious';
    } else if (profile.healthConditions.isNotEmpty) {
      return 'health_management';
    } else if (profile.activityLevel == ActivityLevel.extremelyActive) {
      return 'athlete';
    } else {
      return 'general_wellness';
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  Future<void> trackProfileUpdate({
    required String fieldName,
    required dynamic oldValue,
    required dynamic newValue,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking profile update: $fieldName',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'profile_updated',
        parameters: {
          'field_name': fieldName,
          'old_value': oldValue?.toString() ?? 'null',
          'new_value': newValue?.toString() ?? 'null',
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Profile update tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track profile update: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  Future<void> trackGoalProgress({
    required String goalType,
    required double currentValue,
    required double targetValue,
    double? progressPercentage,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking goal progress: $goalType',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'goal_progress',
        parameters: {
          'goal_type': goalType,
          'current_value': currentValue,
          'target_value': targetValue,
          if (progressPercentage != null)
            'progress_percentage': progressPercentage,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Goal progress tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track goal progress: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
  Future<void> trackWeightChange({
    required double oldWeight,
    required double newWeight,
    double? targetWeight,
  }) async {
    try {
      final weightChange = newWeight - oldWeight;
      final progressToTarget = targetWeight != null
          ? ((newWeight - targetWeight) / (oldWeight - targetWeight)) * 100
          : null;

      developer.log(
          'üë§ PersonaAnalyticsService: Tracking weight change: ${weightChange.toStringAsFixed(1)}kg',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'weight_changed',
        parameters: {
          'old_weight_kg': oldWeight,
          'new_weight_kg': newWeight,
          'weight_change_kg': weightChange,
          if (targetWeight != null) 'target_weight_kg': targetWeight,
          if (progressToTarget != null)
            'progress_to_target_percent': progressToTarget,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Weight change tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track weight change: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Future<void> trackActivityLevelChange({
    required ActivityLevel oldLevel,
    required ActivityLevel newLevel,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking activity level change: ${oldLevel.name} -> ${newLevel.name}',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'activity_level_changed',
        parameters: {
          'old_activity_level': oldLevel.name,
          'new_activity_level': newLevel.name,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Activity level change tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track activity level change: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
  Future<void> trackDietaryPreferenceChange({
    required List<DietaryPreference> oldPreferences,
    required List<DietaryPreference> newPreferences,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking dietary preference change',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'dietary_preferences_changed',
        parameters: {
          'old_preferences': oldPreferences.map((p) => p.name).join(','),
          'new_preferences': newPreferences.map((p) => p.name).join(','),
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Dietary preference change tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track dietary preference change: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> trackUserSession({
    required String sessionType,
    required int durationMinutes,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking user session: $sessionType',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'user_session',
        parameters: {
          'session_type': sessionType,
          'duration_minutes': durationMinutes,
          'user_persona': _currentUserProfile != null
              ? _determinePersona(_currentUserProfile!)
              : 'unknown',
          if (additionalData != null) ...additionalData,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: User session tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track user session: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
  Future<void> trackFeatureUsage({
    required String featureName,
    required String action,
    Map<String, dynamic>? parameters,
  }) async {
    try {
      developer.log(
          'üë§ PersonaAnalyticsService: Tracking feature usage: $featureName - $action',
          name: 'PersonaAnalyticsService');

      await AnalyticsService.instance.logEvent(
        name: 'feature_usage',
        parameters: {
          'feature_name': featureName,
          'action': action,
          'user_persona': _currentUserProfile != null
              ? _determinePersona(_currentUserProfile!)
              : 'unknown',
          if (parameters != null) ...parameters,
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
      );

      developer.log(
          'üë§ PersonaAnalyticsService: Feature usage tracked successfully',
          name: 'PersonaAnalyticsService');
    } catch (e) {
      developer.log(
          'üë§ PersonaAnalyticsService: Failed to track feature usage: $e',
          name: 'PersonaAnalyticsService');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  UserProfile? get currentUserProfile => _currentUserProfile;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
}
