// import 'package:firebase_performance/firebase_performance.dart';
import 'package:nutry_flow/core/services/analytics_service.dart';
import 'package:nutry_flow/core/services/firebase_interfaces.dart';
import 'dart:developer' as developer;

class PerformanceService {
  static final PerformanceService _instance = PerformanceService._();
  static PerformanceService get instance => _instance;

  PerformanceService._();

  late FirebasePerformanceInterface _performance;
  bool _isInitialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      developer.log('‚ö° PerformanceService: Initializing performance service', name: 'PerformanceService');

      _performance = MockFirebasePerformance.instance;

      // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await _performance.setPerformanceCollectionEnabled(true);

      _isInitialized = true;
      developer.log('‚ö° PerformanceService: Performance service initialized successfully', name: 'PerformanceService');
    } catch (e) {
      developer.log('‚ö° PerformanceService: Failed to initialize performance service: $e', name: 'PerformanceService');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–π—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  TraceInterface createTrace(String name) {
    try {
      if (!_isInitialized) {
        developer.log('‚ö° PerformanceService: Performance not initialized, creating mock trace', name: 'PerformanceService');
        return _performance.newTrace(name);
      }

      developer.log('‚ö° PerformanceService: Creating trace: $name', name: 'PerformanceService');
      return _performance.newTrace(name);
    } catch (e) {
      developer.log('‚ö° PerformanceService: Failed to create trace $name: $e', name: 'PerformanceService');
      return _performance.newTrace(name);
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ HTTP –º–µ—Ç—Ä–∏–∫–∏
  HttpMetricInterface createHttpMetric(String url, String method) {
    try {
      if (!_isInitialized) {
        developer.log('‚ö° PerformanceService: Performance not initialized, creating mock HTTP metric', name: 'PerformanceService');
        return _performance.newHttpMetric(url, HttpMethod.get);
      }

      developer.log('‚ö° PerformanceService: Creating HTTP metric: $method $url', name: 'PerformanceService');
      return _performance.newHttpMetric(url, HttpMethod.get);
    } catch (e) {
      developer.log('‚ö° PerformanceService: Failed to create HTTP metric: $e', name: 'PerformanceService');
      return _performance.newHttpMetric(url, HttpMethod.get);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞
  Future<void> trackScreenLoadTime(String screenName) async {
    try {
      final trace = await createTrace('screen_load_$screenName');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
      await Future.delayed(const Duration(milliseconds: 100));
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'screen_load_time',
        parameters: {
          'screen_name': screenName,
          'load_time_ms': 100,
        },
      );
      
      developer.log('üìä PerformanceService: Screen load time tracked: $screenName - 100ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track screen load time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ API –∑–∞–ø—Ä–æ—Å–∞
  Future<void> trackApiRequest(String endpoint, String method) async {
    try {
      final metric = await createHttpMetric(endpoint, method);
      await metric.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      await Future.delayed(const Duration(milliseconds: 200));
      
      await metric.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'api_request_time',
        parameters: {
          'endpoint': endpoint,
          'method': method,
          'request_time_ms': 200,
        },
      );
      
      developer.log('üìä PerformanceService: API request time tracked: $endpoint - 200ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track API request time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  Future<void> trackDataLoadTime(String dataType, Duration loadTime) async {
    try {
      final trace = await createTrace('data_load_$dataType');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
      await Future.delayed(loadTime);
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'data_load_time',
        parameters: {
          'data_type': dataType,
          'load_time_ms': loadTime.inMilliseconds,
        },
      );
      
      developer.log('üìä PerformanceService: Data load time tracked: $dataType - ${loadTime.inMilliseconds}ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track data load time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  Future<void> trackImageProcessingTime(String imageType, Duration processingTime) async {
    try {
      final trace = await createTrace('image_processing_$imageType');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await Future.delayed(processingTime);
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'image_processing_time',
        parameters: {
          'image_type': imageType,
          'processing_time_ms': processingTime.inMilliseconds,
        },
      );
      
      developer.log('üìä PerformanceService: Image processing time tracked: $imageType - ${processingTime.inMilliseconds}ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track image processing time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> trackSyncTime(String syncType, Duration syncTime) async {
    try {
      final trace = await createTrace('sync_$syncType');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await Future.delayed(syncTime);
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'sync_time',
        parameters: {
          'sync_type': syncType,
          'sync_time_ms': syncTime.inMilliseconds,
        },
      );
      
      developer.log('üìä PerformanceService: Sync time tracked: $syncType - ${syncTime.inMilliseconds}ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track sync time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  Future<void> trackMemoryUsage() async {
    try {
      final trace = await createTrace('memory_usage');
      await trace.start();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      final memoryInfo = {
        'total_memory': 1024 * 1024 * 1024, // 1GB
        'used_memory': 512 * 1024 * 1024,   // 512MB
        'free_memory': 512 * 1024 * 1024,   // 512MB
      };
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'memory_usage',
        parameters: {
          'total_memory_mb': memoryInfo['total_memory']! / (1024 * 1024),
          'used_memory_mb': memoryInfo['used_memory']! / (1024 * 1024),
          'free_memory_mb': memoryInfo['free_memory']! / (1024 * 1024),
        },
      );
      
      developer.log('üìä PerformanceService: Memory usage tracked', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track memory usage: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> trackAppStartTime(Duration startTime) async {
    try {
      final trace = await createTrace('app_start');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
      await Future.delayed(startTime);
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'app_start_time',
        parameters: {
          'start_time_ms': startTime.inMilliseconds,
        },
      );
      
      developer.log('üìä PerformanceService: App start time tracked: ${startTime.inMilliseconds}ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track app start time: $e', name: 'PerformanceService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ UI
  Future<void> trackUIResponseTime(String action) async {
    try {
      final trace = await createTrace('ui_response_$action');
      await trace.start();
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
      await Future.delayed(const Duration(milliseconds: 50));
      
      await trace.stop();
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: 'ui_response_time',
        parameters: {
          'action': action,
          'response_time_ms': 50,
        },
      );
      
      developer.log('üìä PerformanceService: UI response time tracked: $action - 50ms', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to track UI response time: $e', name: 'PerformanceService');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π—Å–∞
  Future<void> setTraceAttribute(TraceInterface trace, String name, String value) async {
    try {
      await trace.setAttribute(name, value);
      developer.log('üìä PerformanceService: Trace attribute set: $name = $value', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to set trace attribute: $e', name: 'PerformanceService');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è HTTP –º–µ—Ç—Ä–∏–∫–∏
  Future<void> setHttpMetricAttribute(HttpMetricInterface metric, String name, String value) async {
    try {
      await metric.setAttribute(name, value);
      developer.log('üìä PerformanceService: HTTP metric attribute set: $name = $value', name: 'PerformanceService');
    } catch (e) {
      developer.log('üìä PerformanceService: Failed to set HTTP metric attribute: $e', name: 'PerformanceService');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FirebasePerformance
  FirebasePerformanceInterface get performance => _performance;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
} 