import 'dart:convert';
// import 'dart:io';
// import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
// import 'package:nutry_flow/core/services/supabase_service.dart';
import 'dart:developer' as developer;
// import 'package:timezone/timezone.dart' as tz;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// @pragma('vm:entry-point')
// Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
//   developer.log('üîî Background message received: ${message.messageId}', name: 'NotificationService');
//
//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
//   final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
//       FlutterLocalNotificationsPlugin();
//
//   const AndroidInitializationSettings initializationSettingsAndroid =
//       AndroidInitializationSettings('@mipmap/ic_launcher');
//
//   const InitializationSettings initializationSettings =
//       InitializationSettings(android: initializationSettingsAndroid);
//
//   await flutterLocalNotificationsPlugin.initialize(initializationSettings);
//
//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
//   await _showLocalNotification(message);
// }

// Future<void> _showLocalNotification(RemoteMessage message) async {
//   const AndroidNotificationDetails androidPlatformChannelSpecifics =
//       AndroidNotificationDetails(
//     'nutry_flow_channel',
//     'NutryFlow Notifications',
//     channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
//     importance: Importance.max,
//     priority: Priority.high,
//     showWhen: true,
//   );
//
//   const NotificationDetails platformChannelSpecifics =
//       NotificationDetails(android: androidPlatformChannelSpecifics);
//
//   final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
//       FlutterLocalNotificationsPlugin();
//
//   await flutterLocalNotificationsPlugin.show(
//     message.hashCode,
//     message.notification?.title ?? 'NutryFlow',
//     message.notification?.body ?? '',
//     platformChannelSpecifics,
//     payload: json.encode(message.data),
//   );
// }

class NotificationService {
  static final NotificationService _instance = NotificationService._();
  static NotificationService get instance => _instance;

  NotificationService._();

  // late FirebaseMessaging _firebaseMessaging;
  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  String? _fcmToken;
  bool _isInitialized = false;

  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static const String _generalChannel = 'general_notifications';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      developer.log('üîî NotificationService: Initializing notification service',
          name: 'NotificationService');

      final flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android
      const androidSettings =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è iOS
      const iosSettings = DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );

      // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const initializationSettings = InitializationSettings(
        android: androidSettings,
        iOS: iosSettings,
      );

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      await flutterLocalNotificationsPlugin.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onNotificationTapped,
      );

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Messaging
      // _firebaseMessaging = FirebaseMessaging.instance;

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      // await _requestPermissions();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
      // await _setupMessageHandlers();

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _createNotificationChannels();

      _isInitialized = true;
      developer.log(
          'üîî NotificationService: Notification service initialized successfully',
          name: 'NotificationService');
    } catch (e) {
      developer.log(
          'üîî NotificationService: Failed to initialize notification service: $e',
          name: 'NotificationService');
      rethrow;
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  // Future<void> _requestPermissions() async {
  //   try {
  //     // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  //     final localSettings = await _localNotifications
  //         .resolvePlatformSpecificImplementation<
  //             AndroidFlutterLocalNotificationsPlugin>()
  //         ?.requestNotificationsPermission();

  //     // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Firebase Messaging
  //     final messagingSettings = await _firebaseMessaging.requestPermission(
  //       alert: true,
  //       announcement: false,
  //       badge: true,
  //       carPlay: false,
  //       criticalAlert: false,
  //       provisional: false,
  //       sound: true,
  //     );

  //     developer.log('üîî NotificationService: Permission status - Local: $localSettings, Firebase: ${messagingSettings.authorizationStatus}', name: 'NotificationService');
  //   } catch (e) {
  //     developer.log('üîî NotificationService: Failed to request permissions: $e', name: 'NotificationService');
  //   }
  // }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π Firebase
  // Future<void> _setupMessageHandlers() async {
  //   try {
  //     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
  //     FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  //     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
  //     FirebaseMessaging.onMessage.listen(_onMessageReceived);

  //     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  //     FirebaseMessaging.onMessageOpenedApp.listen(_onNotificationOpenedApp);

  //     // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ FCM
  //     final token = await _firebaseMessaging.getToken();
  //     if (token != null) {
  //       developer.log('üîî NotificationService: FCM Token: $token', name: 'NotificationService');
  //       await _saveFCMToken(token);
  //     }

  //     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  //     _firebaseMessaging.onTokenRefresh.listen(_onTokenRefresh);
  //   } catch (e) {
  //     developer.log('üîî NotificationService: Failed to setup message handlers: $e', name: 'NotificationService');
  //   }
  // }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
  Future<void> _createNotificationChannels() async {
    try {
      const androidChannel = AndroidNotificationChannel(
        'general',
        '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        description: '–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
        enableLights: true,
      );

      const reminderChannel = AndroidNotificationChannel(
        'reminders',
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
        description: '–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
        enableLights: true,
      );

      const achievementChannel = AndroidNotificationChannel(
        'achievements',
        '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        description: '–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
        enableLights: true,
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(androidChannel);

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(reminderChannel);

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(achievementChannel);

      developer.log('üîî NotificationService: Notification channels created',
          name: 'NotificationService');
    } catch (e) {
      developer.log(
          'üîî NotificationService: Failed to create notification channels: $e',
          name: 'NotificationService');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  // Future<void> _getFCMToken() async {
  //   _fcmToken = await _firebaseMessaging.getToken();
  //   developer.log('üîî FCM Token: $_fcmToken', name: 'NotificationService');

  //   // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Supabase
  //   if (_fcmToken != null) {
  //     await _saveFCMTokenToSupabase(_fcmToken!);
  //   }

  //   // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  //   _firebaseMessaging.onTokenRefresh.listen((newToken) {
  //     _fcmToken = newToken;
  //     _saveFCMTokenToSupabase(newToken);
  //     developer.log('üîî FCM Token refreshed: $newToken', name: 'NotificationService');
  //   });
  // }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ foreground
  // void _handleForegroundMessage(RemoteMessage message) {
  //   developer.log('üîî Foreground message received: ${message.messageId}', name: 'NotificationService');
  //   developer.log('üîî Message data: ${message.data}', name: 'NotificationService');

  //   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  //   _showLocalNotificationFromMessage(message);
  // }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  // void _handleNotificationTap(RemoteMessage message) {
  //   developer.log('üîî Notification tapped: ${message.messageId}', name: 'NotificationService');
  //   developer.log('üîî Message data: ${message.data}', name: 'NotificationService');

  //   // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  //   final data = message.data;
  //   final type = data['type'];

  //   switch (type) {
  //     case 'meal_reminder':
  //       _handleMealReminder(data);
  //       break;
  //     case 'workout_reminder':
  //       _handleWorkoutReminder(data);
  //       break;
  //     case 'goal_achievement':
  //       _handleGoalAchievement(data);
  //       break;
  //     default:
  //       _handleGeneralNotification(data);
  //       break;
  //   }
  // }

  /// –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  // Future<void> _showLocalNotificationFromMessage(RemoteMessage message) async {
  //   final data = message.data;
  //   final type = data['type'] ?? 'general';

  //   String channelId;
  //   switch (type) {
  //     case 'meal_reminder':
  //       channelId = _mealReminderChannel;
  //       break;
  //     case 'workout_reminder':
  //       channelId = _workoutReminderChannel;
  //       break;
  //     case 'goal_achievement':
  //       channelId = _goalReminderChannel;
  //       break;
  //     default:
  //       channelId = _generalChannel;
  //       break;
  //   }

  //   final AndroidNotificationDetails androidPlatformChannelSpecifics =
  //       AndroidNotificationDetails(
  //     channelId,
  //     'NutryFlow Notifications',
  //     channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
  //     importance: Importance.max,
  //     priority: Priority.high,
  //     showWhen: true,
  //   );

  //   final NotificationDetails platformChannelSpecifics =
  //       NotificationDetails(android: androidPlatformChannelSpecifics);

  //   await _localNotifications.show(
  //     message.hashCode,
  //     message.notification?.title ?? 'NutryFlow',
  //     message.notification?.body ?? '',
  //     platformChannelSpecifics,
  //     payload: json.encode(data),
  //   );
  // }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–¥–µ
  void _handleMealReminder(Map<String, dynamic> data) {
    developer.log('üîî Handling meal reminder: $data',
        name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É –µ–¥—ã
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  void _handleWorkoutReminder(Map<String, dynamic> data) {
    developer.log('üîî Handling workout reminder: $data',
        name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  void _handleGoalAchievement(Map<String, dynamic> data) {
    developer.log('üîî Handling goal achievement: $data',
        name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É —Ü–µ–ª–µ–π
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleGeneralNotification(Map<String, dynamic> data) {
    developer.log('üîî Handling general notification: $data',
        name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> scheduleLocalNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
    String channelId = _generalChannel,
  }) async {
    final AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      channelId,
      'NutryFlow Notifications',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
    );

    final NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);

    await _localNotifications.show(
      id,
      title,
      body,
      platformChannelSpecifics,
      payload: payload,
    );

    developer.log('üîî Local notification scheduled for: $scheduledDate',
        name: 'NotificationService');
  }

  /// –û—Ç–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> cancelLocalNotification(int id) async {
    await _localNotifications.cancel(id);
    developer.log('üîî Local notification cancelled: $id',
        name: 'NotificationService');
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> cancelAllLocalNotifications() async {
    await _localNotifications.cancelAll();
    developer.log('üîî All local notifications cancelled',
        name: 'NotificationService');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  String? get fcmToken => _fcmToken;

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _onNotificationTapped(NotificationResponse response) {
    try {
      developer.log(
          'üîî NotificationService: Local notification tapped: ${response.payload}',
          name: 'NotificationService');

      if (response.payload != null) {
        final data = json.decode(response.payload!);
        _handleNotificationData(data);
      }
    } catch (e) {
      developer.log(
          'üîî NotificationService: Failed to handle notification tap: $e',
          name: 'NotificationService');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleNotificationData(Map<String, dynamic> data) {
    final type = data['type'] as String?;

    switch (type) {
      case 'meal_reminder':
        _handleMealReminder(data);
        break;
      case 'workout_reminder':
        _handleWorkoutReminder(data);
        break;
      case 'goal_achievement':
        _handleGoalAchievement(data);
        break;
      default:
        _handleGeneralNotification(data);
        break;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Firebase
  // void _onMessageReceived(RemoteMessage message) {
  //   try {
  //     developer.log('üîî NotificationService: Firebase message received: ${message.notification?.title}', name: 'NotificationService');
  //
  //     final data = message.data;
  //     _handleNotificationData(data);
  //   } catch (e) {
  //     developer.log('üîî NotificationService: Failed to handle Firebase message: $e', name: 'NotificationService');
  //   }
  // }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Firebase
  // void _onNotificationOpenedApp(RemoteMessage message) {
  //   try {
  //     developer.log('üîî NotificationService: Firebase notification opened: ${message.notification?.title}', name: 'NotificationService');
  //
  //     final data = message.data;
  //     _handleNotificationData(data);
  //   } catch (e) {
  //     developer.log('üîî NotificationService: Failed to handle Firebase notification open: $e', name: 'NotificationService');
  //   }
  // }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
}
