import 'dart:convert';
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:nutry_flow/core/services/supabase_service.dart';
import 'dart:developer' as developer;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  developer.log('üîî Background message received: ${message.messageId}', name: 'NotificationService');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');
  
  const InitializationSettings initializationSettings =
      InitializationSettings(android: initializationSettingsAndroid);
  
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  await _showLocalNotification(message);
}

Future<void> _showLocalNotification(RemoteMessage message) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails(
    'nutry_flow_channel',
    'NutryFlow Notifications',
    channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
    importance: Importance.max,
    priority: Priority.high,
    showWhen: true,
  );
  
  const NotificationDetails platformChannelSpecifics =
      NotificationDetails(android: androidPlatformChannelSpecifics);
  
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  
  await flutterLocalNotificationsPlugin.show(
    message.hashCode,
    message.notification?.title ?? 'NutryFlow',
    message.notification?.body ?? '',
    platformChannelSpecifics,
    payload: json.encode(message.data),
  );
}

class NotificationService {
  static final NotificationService _instance = NotificationService._();
  static NotificationService get instance => _instance;

  NotificationService._();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  String? _fcmToken;
  bool _isInitialized = false;

  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static const String _mealReminderChannel = 'meal_reminders';
  static const String _workoutReminderChannel = 'workout_reminders';
  static const String _goalReminderChannel = 'goal_reminders';
  static const String _generalChannel = 'general_notifications';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      developer.log('üîî Initializing notification service', name: 'NotificationService');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Messaging
      await _setupFirebaseMessaging();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _setupLocalNotifications();

      // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await _requestPermissions();

      // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
      await _getFCMToken();

      _isInitialized = true;
      developer.log('üîî Notification service initialized successfully', name: 'NotificationService');
    } catch (e) {
      developer.log('üîî Failed to initialize notification service: $e', name: 'NotificationService');
      rethrow;
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Messaging
  Future<void> _setupFirebaseMessaging() async {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationTap);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    RemoteMessage? initialMessage = await _firebaseMessaging.getInitialMessage();
    if (initialMessage != null) {
      _handleNotificationTap(initialMessage);
    }
  }

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _setupLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _localNotifications.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _handleLocalNotificationTap,
    );

    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è Android
    await _createNotificationChannels();
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android
  Future<void> _createNotificationChannels() async {
    if (Platform.isAndroid) {
      const AndroidNotificationChannel mealReminderChannel = AndroidNotificationChannel(
        _mealReminderChannel,
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–¥–µ',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      const AndroidNotificationChannel workoutReminderChannel = AndroidNotificationChannel(
        _workoutReminderChannel,
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö',
        importance: Importance.high,
        playSound: true,
        enableVibration: true,
      );

      const AndroidNotificationChannel goalReminderChannel = AndroidNotificationChannel(
        _goalReminderChannel,
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ü–µ–ª—è—Ö',
        description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π',
        importance: Importance.medium,
        playSound: true,
        enableVibration: false,
      );

      const AndroidNotificationChannel generalChannel = AndroidNotificationChannel(
        _generalChannel,
        '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        description: '–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
        importance: Importance.defaultImportance,
        playSound: true,
        enableVibration: false,
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(mealReminderChannel);

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(workoutReminderChannel);

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(goalReminderChannel);

      await _localNotifications
          .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(generalChannel);
    }
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> _requestPermissions() async {
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    developer.log('üîî Notification permission status: ${settings.authorizationStatus}', name: 'NotificationService');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  Future<void> _getFCMToken() async {
    _fcmToken = await _firebaseMessaging.getToken();
    developer.log('üîî FCM Token: $_fcmToken', name: 'NotificationService');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Supabase
    if (_fcmToken != null) {
      await _saveFCMTokenToSupabase(_fcmToken!);
    }

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      _fcmToken = newToken;
      _saveFCMTokenToSupabase(newToken);
      developer.log('üîî FCM Token refreshed: $newToken', name: 'NotificationService');
    });
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –≤ Supabase
  Future<void> _saveFCMTokenToSupabase(String token) async {
    try {
      final user = SupabaseService.instance.currentUser;
      if (user != null) {
        await SupabaseService.instance.saveUserData('user_fcm_tokens', {
          'user_id': user.id,
          'token': token,
          'platform': Platform.isIOS ? 'ios' : 'android',
          'created_at': DateTime.now().toIso8601String(),
          'updated_at': DateTime.now().toIso8601String(),
        });
        developer.log('üîî FCM token saved to Supabase', name: 'NotificationService');
      }
    } catch (e) {
      developer.log('üîî Failed to save FCM token to Supabase: $e', name: 'NotificationService');
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ foreground
  void _handleForegroundMessage(RemoteMessage message) {
    developer.log('üîî Foreground message received: ${message.messageId}', name: 'NotificationService');
    developer.log('üîî Message data: ${message.data}', name: 'NotificationService');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    _showLocalNotificationFromMessage(message);
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _handleNotificationTap(RemoteMessage message) {
    developer.log('üîî Notification tapped: ${message.messageId}', name: 'NotificationService');
    developer.log('üîî Message data: ${message.data}', name: 'NotificationService');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    final data = message.data;
    final type = data['type'];

    switch (type) {
      case 'meal_reminder':
        _handleMealReminder(data);
        break;
      case 'workout_reminder':
        _handleWorkoutReminder(data);
        break;
      case 'goal_achievement':
        _handleGoalAchievement(data);
        break;
      default:
        _handleGeneralNotification(data);
        break;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _handleLocalNotificationTap(NotificationResponse response) {
    developer.log('üîî Local notification tapped: ${response.payload}', name: 'NotificationService');

    if (response.payload != null) {
      final data = json.decode(response.payload!);
      final type = data['type'];

      switch (type) {
        case 'meal_reminder':
          _handleMealReminder(data);
          break;
        case 'workout_reminder':
          _handleWorkoutReminder(data);
          break;
        case 'goal_achievement':
          _handleGoalAchievement(data);
          break;
        default:
          _handleGeneralNotification(data);
          break;
      }
    }
  }

  /// –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  Future<void> _showLocalNotificationFromMessage(RemoteMessage message) async {
    final data = message.data;
    final type = data['type'] ?? 'general';

    String channelId;
    switch (type) {
      case 'meal_reminder':
        channelId = _mealReminderChannel;
        break;
      case 'workout_reminder':
        channelId = _workoutReminderChannel;
        break;
      case 'goal_achievement':
        channelId = _goalReminderChannel;
        break;
      default:
        channelId = _generalChannel;
        break;
    }

    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      channelId,
      'NutryFlow Notifications',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
    );

    const NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);

    await _localNotifications.show(
      message.hashCode,
      message.notification?.title ?? 'NutryFlow',
      message.notification?.body ?? '',
      platformChannelSpecifics,
      payload: json.encode(data),
    );
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–¥–µ
  void _handleMealReminder(Map<String, dynamic> data) {
    developer.log('üîî Handling meal reminder: $data', name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É –µ–¥—ã
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  void _handleWorkoutReminder(Map<String, dynamic> data) {
    developer.log('üîî Handling workout reminder: $data', name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  void _handleGoalAchievement(Map<String, dynamic> data) {
    developer.log('üîî Handling goal achievement: $data', name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É —Ü–µ–ª–µ–π
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  void _handleGeneralNotification(Map<String, dynamic> data) {
    developer.log('üîî Handling general notification: $data', name: 'NotificationService');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  /// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> scheduleLocalNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
    String channelId = _generalChannel,
  }) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      channelId,
      'NutryFlow Notifications',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç NutryFlow',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: true,
    );

    const NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);

    await _localNotifications.zonedSchedule(
      id,
      title,
      body,
      scheduledDate,
      platformChannelSpecifics,
      androidAllowWhileIdle: true,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: payload,
    );

    developer.log('üîî Local notification scheduled for: $scheduledDate', name: 'NotificationService');
  }

  /// –û—Ç–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> cancelLocalNotification(int id) async {
    await _localNotifications.cancel(id);
    developer.log('üîî Local notification cancelled: $id', name: 'NotificationService');
  }

  /// –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> cancelAllLocalNotifications() async {
    await _localNotifications.cancelAll();
    developer.log('üîî All local notifications cancelled', name: 'NotificationService');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  String? get fcmToken => _fcmToken;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;
} 