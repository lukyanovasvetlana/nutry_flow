import 'package:nutry_flow/core/services/analytics_service.dart';
import 'package:nutry_flow/core/services/performance_service.dart';
import 'package:nutry_flow/core/services/crashlytics_service.dart';
import 'package:nutry_flow/core/services/supabase_service.dart';
import 'dart:developer' as developer;

class MonitoringService {
  static final MonitoringService _instance = MonitoringService._();
  static MonitoringService get instance => _instance;

  MonitoringService._();

  bool _isInitialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      developer.log('üìä MonitoringService: Initializing monitoring services', name: 'MonitoringService');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Future.wait([
        AnalyticsService.instance.initialize(),
        PerformanceService.instance.initialize(),
        CrashlyticsService.instance.initialize(),
      ]);

      _isInitialized = true;
      developer.log('üìä MonitoringService: All monitoring services initialized successfully', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to initialize monitoring services: $e', name: 'MonitoringService');
      rethrow;
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
  Future<void> trackEvent({
    required String eventName,
    Map<String, dynamic>? parameters,
    String? screenName,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logEvent(
        name: eventName,
        parameters: parameters,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (screenName != null) {
        await AnalyticsService.instance.logScreenView(screenName: screenName);
      }

      developer.log('üìä MonitoringService: Event tracked successfully: $eventName', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track event: $e', name: 'MonitoringService');
      await _logError('Event tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  Future<void> trackScreen({
    required String screenName,
    required Future<void> Function() screenLoadFunction,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–∫—Ä–∞–Ω–∞
      await AnalyticsService.instance.logScreenView(screenName: screenName);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞
      await screenLoadFunction();
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫—Ä–∞–Ω–∞
      await PerformanceService.instance.trackScreenLoadTime(screenName);

      developer.log('üìä MonitoringService: Screen tracked successfully: $screenName', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track screen: $e', name: 'MonitoringService');
      await _logError('Screen tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
  Future<void> trackApiRequest({
    required String endpoint,
    required String method,
    required Future<void> Function() apiCall,
    Map<String, dynamic>? requestData,
  }) async {
    try {
      try {
        await apiCall();
      } catch (e) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É API
        await CrashlyticsService.instance.logApiError(
          endpoint: endpoint,
          method: method,
          statusCode: 500, // –ü—Ä–∏–º–µ—Ä
          errorMessage: e.toString(),
          requestData: requestData,
        );
        rethrow;
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API –∑–∞–ø—Ä–æ—Å–∞
      await PerformanceService.instance.trackApiRequest(endpoint, method);

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      await AnalyticsService.instance.logEvent(
        name: 'api_request_success',
        parameters: {
          'endpoint': endpoint,
          'method': method,
          if (requestData != null) 'request_data': requestData,
        },
      );

      developer.log('üìä MonitoringService: API request tracked successfully: $method $endpoint', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track API request: $e', name: 'MonitoringService');
      await _logError('API request tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  Future<void> trackUserAction({
    required String actionName,
    required String screenName,
    Map<String, dynamic>? parameters,
    Future<void> Function()? actionFunction,
  }) async {
    try {
      if (actionFunction != null) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await actionFunction();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ UI
        await PerformanceService.instance.trackUIResponseTime(actionName);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await AnalyticsService.instance.logEvent(
        name: 'user_action',
        parameters: {
          'action_name': actionName,
          'screen_name': screenName,
          if (parameters != null) ...parameters,
        },
      );

      developer.log('üìä MonitoringService: User action tracked successfully: $actionName', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track user action: $e', name: 'MonitoringService');
      await _logError('User action tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
  Future<void> trackError({
    required dynamic error,
    StackTrace? stackTrace,
    String? screenName,
    String? actionName,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ Crashlytics
      await CrashlyticsService.instance.logError(
        error,
        stackTrace,
        additionalData: {
          if (screenName != null) 'screen_name': screenName,
          if (actionName != null) 'action_name': actionName,
          if (additionalData != null) ...additionalData,
        },
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logError(
        errorType: error.runtimeType.toString(),
        errorMessage: error.toString(),
        screenName: screenName,
        additionalData: additionalData,
      );

      developer.log('üìä MonitoringService: Error tracked successfully', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track error: $e', name: 'MonitoringService');
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> trackAppPerformance() async {
    try {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await PerformanceService.instance.trackAppStartTime(Duration.zero);

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
      await PerformanceService.instance.trackMemoryUsage();

      developer.log('üìä MonitoringService: App performance tracked successfully', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track app performance: $e', name: 'MonitoringService');
      await _logError('App performance tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–∞–Ω—Å–∞
  Future<void> trackUserSession({
    required String userId,
    required String sessionType,
    Map<String, dynamic>? sessionData,
  }) async {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      await AnalyticsService.instance.setUserProperty(name: 'user_id', value: userId);
      await CrashlyticsService.instance.setUserIdentifier(userId);

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–µ–∞–Ω—Å–∞
      await AnalyticsService.instance.logEvent(
        name: 'user_session_start',
        parameters: {
          'session_type': sessionType,
          'user_id': userId,
          if (sessionData != null) ...sessionData,
        },
      );

      developer.log('üìä MonitoringService: User session tracked successfully: $sessionType', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track user session: $e', name: 'MonitoringService');
      await _logError('User session tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
  Future<void> trackGoalAchievement({
    required String goalName,
    required String goalType,
    double? progress,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logGoalAchievement(
        goalName: goalName,
        goalType: goalType,
        progress: progress,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      await AnalyticsService.instance.logEvent(
        name: 'goal_achievement',
        parameters: {
          'goal_name': goalName,
          'goal_type': goalType,
          if (progress != null) 'progress': progress,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log('üìä MonitoringService: Goal achievement tracked successfully: $goalName', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track goal achievement: $e', name: 'MonitoringService');
      await _logError('Goal achievement tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  Future<void> trackWorkout({
    required String workoutType,
    required int durationMinutes,
    required int caloriesBurned,
    String? workoutName,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logWorkout(
        workoutType: workoutType,
        durationMinutes: durationMinutes,
        caloriesBurned: caloriesBurned,
        workoutName: workoutName,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      await AnalyticsService.instance.logEvent(
        name: 'workout_completed',
        parameters: {
          'workout_type': workoutType,
          'duration_minutes': durationMinutes,
          'calories_burned': caloriesBurned,
          if (workoutName != null) 'workout_name': workoutName,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log('üìä MonitoringService: Workout tracked successfully: $workoutType', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track workout: $e', name: 'MonitoringService');
      await _logError('Workout tracking failed', e);
    }
  }

  /// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  Future<void> trackMeal({
    required String mealType,
    required int calories,
    required double protein,
    required double fat,
    required double carbs,
    String? mealName,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      await AnalyticsService.instance.logMeal(
        mealType: mealType,
        calories: calories,
        protein: protein,
        fat: fat,
        carbs: carbs,
        mealName: mealName,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      await AnalyticsService.instance.logEvent(
        name: 'meal_logged',
        parameters: {
          'meal_type': mealType,
          'calories': calories,
          'protein': protein,
          'fat': fat,
          'carbs': carbs,
          if (mealName != null) 'meal_name': mealName,
          if (additionalData != null) ...additionalData,
        },
      );

      developer.log('üìä MonitoringService: Meal tracked successfully: $mealType', name: 'MonitoringService');
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to track meal: $e', name: 'MonitoringService');
      await _logError('Meal tracking failed', e);
    }
  }

  /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  Future<void> _logError(String context, dynamic error) async {
    try {
      await CrashlyticsService.instance.logError(
        error,
        null,
        reason: context,
        additionalData: {
          'context': context,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );
    } catch (e) {
      developer.log('üìä MonitoringService: Failed to log error in _logError: $e', name: 'MonitoringService');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isInitialized => _isInitialized;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
  AnalyticsService get analytics => AnalyticsService.instance;
  PerformanceService get performance => PerformanceService.instance;
  CrashlyticsService get crashlytics => CrashlyticsService.instance;
} 