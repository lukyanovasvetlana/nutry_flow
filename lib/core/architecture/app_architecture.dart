import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:provider/provider.dart';
import 'package:nutry_flow/core/architecture/app_initializer.dart';
import 'package:nutry_flow/core/architecture/app_router.dart';
import 'package:nutry_flow/core/architecture/app_state.dart';
import 'package:nutry_flow/core/services/supabase_service.dart';
import 'package:nutry_flow/core/services/local_cache_service.dart';
import 'package:nutry_flow/core/services/notification_service.dart';
import 'package:nutry_flow/core/services/monitoring_service.dart';
import 'package:nutry_flow/core/services/ab_testing_service.dart';
import 'package:nutry_flow/features/analytics/presentation/utils/persona_analytics_tracker.dart';
import 'package:nutry_flow/shared/theme/theme_manager.dart';

/// –ì–ª–∞–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class AppArchitecture {
  static final AppArchitecture _instance = AppArchitecture._internal();
  factory AppArchitecture() => _instance;
  AppArchitecture._internal();

  late final AppInitializer _initializer;
  late final AppRouter _router;
  late final AppState _state;
  late final GetIt _serviceLocator;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> initialize() async {
    try {
      print('üèóÔ∏è AppArchitecture: Starting initialization...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å-–ª–æ–∫–∞—Ç–æ—Ä–∞
      _serviceLocator = GetIt.instance;
      _registerServices();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      await _initializeCoreServices();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      _initializer = AppInitializer();
      _router = AppRouter();
      _state = AppState();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      await _initializer.initialize();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
      await _router.initialize();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await _state.initialize();
      
      print('üèóÔ∏è AppArchitecture: Initialization completed successfully');
    } catch (e, stackTrace) {
      print('‚ùå AppArchitecture: Initialization failed: $e');
      print('‚ùå Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ GetIt
  void _registerServices() {
    print('üèóÔ∏è AppArchitecture: Registering services...');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
    _serviceLocator.registerSingleton<SupabaseService>(SupabaseService.instance);
    _serviceLocator.registerSingleton<LocalCacheService>(LocalCacheService.instance);
    _serviceLocator.registerSingleton<NotificationService>(NotificationService.instance);
    _serviceLocator.registerSingleton<MonitoringService>(MonitoringService.instance);
    _serviceLocator.registerSingleton<ABTestingService>(ABTestingService.instance);
    _serviceLocator.registerSingleton<PersonaAnalyticsTracker>(PersonaAnalyticsTracker.instance);
    _serviceLocator.registerSingleton<ThemeManager>(ThemeManager());
    
    print('üèóÔ∏è AppArchitecture: Services registered successfully');
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  Future<void> _initializeCoreServices() async {
    print('üèóÔ∏è AppArchitecture: Initializing core services...');
    
    await SupabaseService.instance.initialize();
    await LocalCacheService.instance.initialize();
    await NotificationService.instance.initialize();
    await MonitoringService.instance.initialize();
    await ABTestingService.instance.initialize();
    await PersonaAnalyticsTracker.instance.initialize();
    await ThemeManager().initialize();
    
    print('üèóÔ∏è AppArchitecture: Core services initialized successfully');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  AppInitializer get initializer => _initializer;
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–æ—É—Ç–µ—Ä–∞
  AppRouter get router => _router;
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  AppState get state => _state;
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å-–ª–æ–∫–∞—Ç–æ—Ä–∞
  GetIt get serviceLocator => _serviceLocator;

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  bool get isInitialized => 
      _initializer.isInitialized && 
      _router.isInitialized && 
      _state.isInitialized;

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    print('üèóÔ∏è AppArchitecture: Disposing...');
    
    await _state.dispose();
    await _router.dispose();
    await _initializer.dispose();
    
    print('üèóÔ∏è AppArchitecture: Disposed successfully');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Widget createApp() {
    if (!isInitialized) {
      throw StateError('AppArchitecture is not initialized. Call initialize() first.');
    }
    
    return MultiProvider(
      providers: [
        ..._state.globalProviders,
        ..._state.globalBlocProviders,
      ],
      child: _router.createApp(),
    );
  }
}
