# Технические предпочтения и паттерны (Flutter/Chibis App)

## Архитектура и структура
- Feature-based структура: lib/features/feature_name/
- Чистая архитектура: разделение на data/domain/presentation
- Использование BLoC/Cubit для управления состоянием
- Dependency Injection через GetIt
- Использование null safety
- Строгие соглашения по именованию файлов и классов

## Навигация
- GoRouter или MaterialApp routes
- Явное определение маршрутов и guard-ов

## Интеграции
- Supabase для backend, аутентификации, хранения данных
- Firebase для push-уведомлений, аналитики, crashlytics
- Использование flutter_secure_storage для хранения секретов

## Тестирование
- flutter_test, bloc_test для unit/widget тестов
- integration_test для интеграционных сценариев
- Покрытие тестами бизнес-логики и ключевых UI-компонентов
- Использование mockito для моков

## CI/CD
- GitHub Actions или Bitrise для автоматизации сборки и тестирования
- Fastlane для деплоя в App Store/Google Play
- Автоматический анализ кода (dart analyze, flutter analyze)

## Документация
- README, dartdoc, ADR, архитектурные схемы
- Документирование всех публичных API и сложной логики

## UX/UI
- Material 3, кастомные темы
- Соблюдение accessibility (a11y)
- Поддержка локализации (l10n)
- Использование кастомных и общих виджетов

## Производительность
- Кеширование изображений и данных
- Оптимизация build-методов
- Lazy loading для тяжелых экранов
- Использование ListView.builder/SliverList для длинных списков

## Безопасность
- Валидация данных на всех уровнях
- Отсутствие секретов в коде
- Безопасное хранение credential-ов

## Прочее
- Git flow, code review, pull request template
- Регулярные архитектурные ревью
- Использование ADR для фиксации ключевых решений

# Добавляйте новые предпочтения и паттерны по мере развития проекта!
